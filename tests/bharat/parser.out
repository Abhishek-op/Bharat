Grammar:

Rule 0     S' -> statement
Rule 1     statement -> TYPE NAME
Rule 2     statement -> DO statement WHILE condition
Rule 3     statement -> TIME
Rule 4     statement -> NAME ( )
Rule 5     statement -> CLASS NAME : statement
Rule 6     statement -> FUNCTION NAME statement
Rule 7     statement -> IF condition THEN statement ELIF condition THEN statement ELSE statement
Rule 8     statement -> IF condition THEN statement
Rule 9     statement -> IF condition THEN statement ELSE statement
Rule 10    statement -> FOR NAME FROM expr TO expr DO statement
Rule 11    statement -> WHILE condition statement
Rule 12    statement -> var_assign
Rule 13    statement -> NAME RUN
Rule 14    statement -> array
Rule 15    statement -> expr
Rule 16    statement -> <empty>
Rule 17    expr -> RANDOMRANGE FROM expr TO expr
Rule 18    expr -> PRINT TIME
Rule 19    expr -> PRINT expr
Rule 20    expr -> FLOAT
Rule 21    expr -> STRING
Rule 22    expr -> NUMBER
Rule 23    expr -> NAME
Rule 24    expr -> - expr  [precedence=right, level=4]
Rule 25    expr -> NUM_INPUT
Rule 26    expr -> RAW_INPUT
Rule 27    expr -> expr > expr
Rule 28    expr -> expr < expr
Rule 29    expr -> NOT expr
Rule 30    expr -> expr AND expr
Rule 31    expr -> expr OR expr
Rule 32    expr -> expr EQ_GREATER expr
Rule 33    expr -> expr EQ_LESS expr
Rule 34    expr -> expr NOT_EQEQ expr
Rule 35    expr -> expr / expr  [precedence=left, level=3]
Rule 36    expr -> expr * expr  [precedence=left, level=3]
Rule 37    expr -> expr - expr  [precedence=left, level=2]
Rule 38    expr -> expr ADD expr  [precedence=left, level=2]
Rule 39    expr -> expr . expr  [precedence=left, level=1]
Rule 40    condition -> expr SHOMARANDE expr
Rule 41    condition -> expr EQEQ expr
Rule 42    var_assign -> NAME = bool
Rule 43    var_assign -> RETURN NAME
Rule 44    var_assign -> NAME = statement
Rule 45    var_assign -> NAME = array
Rule 46    var_assign -> NAME = expr
Rule 47    bool -> NOT bool
Rule 48    bool -> bool ANDALSO bool
Rule 49    bool -> BOOLEAN
Rule 50    array -> array [ expr ]
Rule 51    array -> array + STRING
Rule 52    array -> array + expr
Rule 53    array -> array + array
Rule 54    array -> NAME
Rule 55    array -> [ elements ]
Rule 56    elements -> statement , elements
Rule 57    elements -> statement

Terminals, with rules where they appear:

(                    : 4
)                    : 4
*                    : 36
+                    : 51 52 53
,                    : 56
-                    : 24 37
.                    : 39
/                    : 35
:                    : 5
<                    : 28
=                    : 42 44 45 46
>                    : 27
ADD                  : 38
AND                  : 30
ANDALSO              : 48
BOOLEAN              : 49
CLASS                : 5
DO                   : 2 10
ELIF                 : 7
ELSE                 : 7 9
EQEQ                 : 41
EQ_GREATER           : 32
EQ_LESS              : 33
FLOAT                : 20
FOR                  : 10
FROM                 : 10 17
FUNCTION             : 6
IF                   : 7 8 9
NAME                 : 1 4 5 6 10 13 23 42 43 44 45 46 54
NOT                  : 29 47
NOT_EQEQ             : 34
NUMBER               : 22
NUM_INPUT            : 25
OR                   : 31
PRINT                : 18 19
RANDOMRANGE          : 17
RAW_INPUT            : 26
RETURN               : 43
RUN                  : 13
SHOMARANDE           : 40
STRING               : 21 51
THEN                 : 7 7 8 9
TIME                 : 3 18
TO                   : 10 17
TYPE                 : 1
WHILE                : 2 11
[                    : 50 55
]                    : 50 55
error                : 

Nonterminals, with rules where they appear:

array                : 14 45 50 51 52 53 53
bool                 : 42 47 48 48
condition            : 2 7 7 8 9 11
elements             : 55 56
expr                 : 10 10 15 17 17 19 24 27 27 28 28 29 30 30 31 31 32 32 33 33 34 34 35 35 36 36 37 37 38 38 39 39 40 40 41 41 46 50 52
statement            : 2 5 6 7 7 7 8 9 9 10 11 44 56 57 0
var_assign           : 12


state 0

    (0) S' -> . statement
    (1) statement -> . TYPE NAME
    (2) statement -> . DO statement WHILE condition
    (3) statement -> . TIME
    (4) statement -> . NAME ( )
    (5) statement -> . CLASS NAME : statement
    (6) statement -> . FUNCTION NAME statement
    (7) statement -> . IF condition THEN statement ELIF condition THEN statement ELSE statement
    (8) statement -> . IF condition THEN statement
    (9) statement -> . IF condition THEN statement ELSE statement
    (10) statement -> . FOR NAME FROM expr TO expr DO statement
    (11) statement -> . WHILE condition statement
    (12) statement -> . var_assign
    (13) statement -> . NAME RUN
    (14) statement -> . array
    (15) statement -> . expr
    (16) statement -> .
    (42) var_assign -> . NAME = bool
    (43) var_assign -> . RETURN NAME
    (44) var_assign -> . NAME = statement
    (45) var_assign -> . NAME = array
    (46) var_assign -> . NAME = expr
    (50) array -> . array [ expr ]
    (51) array -> . array + STRING
    (52) array -> . array + expr
    (53) array -> . array + array
    (54) array -> . NAME
    (55) array -> . [ elements ]
    (17) expr -> . RANDOMRANGE FROM expr TO expr
    (18) expr -> . PRINT TIME
    (19) expr -> . PRINT expr
    (20) expr -> . FLOAT
    (21) expr -> . STRING
    (22) expr -> . NUMBER
    (23) expr -> . NAME
    (24) expr -> . - expr
    (25) expr -> . NUM_INPUT
    (26) expr -> . RAW_INPUT
    (27) expr -> . expr > expr
    (28) expr -> . expr < expr
    (29) expr -> . NOT expr
    (30) expr -> . expr AND expr
    (31) expr -> . expr OR expr
    (32) expr -> . expr EQ_GREATER expr
    (33) expr -> . expr EQ_LESS expr
    (34) expr -> . expr NOT_EQEQ expr
    (35) expr -> . expr / expr
    (36) expr -> . expr * expr
    (37) expr -> . expr - expr
    (38) expr -> . expr ADD expr
    (39) expr -> . expr . expr
    TYPE            shift and go to state 2
    DO              shift and go to state 4
    TIME            shift and go to state 6
    NAME            shift and go to state 3
    CLASS           shift and go to state 7
    FUNCTION        shift and go to state 8
    IF              shift and go to state 9
    FOR             shift and go to state 10
    WHILE           shift and go to state 5
    $end            reduce using rule 16 (statement -> .)
    RETURN          shift and go to state 14
    [               shift and go to state 15
    RANDOMRANGE     shift and go to state 17
    PRINT           shift and go to state 18
    FLOAT           shift and go to state 19
    STRING          shift and go to state 16
    NUMBER          shift and go to state 20
    -               shift and go to state 21
    NUM_INPUT       shift and go to state 22
    RAW_INPUT       shift and go to state 23
    NOT             shift and go to state 24

    statement                      shift and go to state 1
    expr                           shift and go to state 11
    var_assign                     shift and go to state 12
    array                          shift and go to state 13

state 1

    (0) S' -> statement .


state 2

    (1) statement -> TYPE . NAME
    NAME            shift and go to state 25


state 3

    (4) statement -> NAME . ( )
    (13) statement -> NAME . RUN
    (42) var_assign -> NAME . = bool
    (44) var_assign -> NAME . = statement
    (45) var_assign -> NAME . = array
    (46) var_assign -> NAME . = expr
    (54) array -> NAME .
    (23) expr -> NAME .
  ! reduce/reduce conflict for $end resolved using rule 23 (expr -> NAME .)
  ! reduce/reduce conflict for WHILE resolved using rule 23 (expr -> NAME .)
  ! reduce/reduce conflict for , resolved using rule 23 (expr -> NAME .)
  ! reduce/reduce conflict for ] resolved using rule 23 (expr -> NAME .)
  ! reduce/reduce conflict for ELIF resolved using rule 23 (expr -> NAME .)
  ! reduce/reduce conflict for ELSE resolved using rule 23 (expr -> NAME .)
    (               shift and go to state 26
    RUN             shift and go to state 27
    =               shift and go to state 28
    [               reduce using rule 54 (array -> NAME .)
    +               reduce using rule 54 (array -> NAME .)
    >               reduce using rule 23 (expr -> NAME .)
    <               reduce using rule 23 (expr -> NAME .)
    AND             reduce using rule 23 (expr -> NAME .)
    OR              reduce using rule 23 (expr -> NAME .)
    EQ_GREATER      reduce using rule 23 (expr -> NAME .)
    EQ_LESS         reduce using rule 23 (expr -> NAME .)
    NOT_EQEQ        reduce using rule 23 (expr -> NAME .)
    /               reduce using rule 23 (expr -> NAME .)
    *               reduce using rule 23 (expr -> NAME .)
    -               reduce using rule 23 (expr -> NAME .)
    ADD             reduce using rule 23 (expr -> NAME .)
    .               reduce using rule 23 (expr -> NAME .)
    $end            reduce using rule 23 (expr -> NAME .)
    WHILE           reduce using rule 23 (expr -> NAME .)
    ,               reduce using rule 23 (expr -> NAME .)
    ]               reduce using rule 23 (expr -> NAME .)
    ELIF            reduce using rule 23 (expr -> NAME .)
    ELSE            reduce using rule 23 (expr -> NAME .)


state 4

    (2) statement -> DO . statement WHILE condition
    (1) statement -> . TYPE NAME
    (2) statement -> . DO statement WHILE condition
    (3) statement -> . TIME
    (4) statement -> . NAME ( )
    (5) statement -> . CLASS NAME : statement
    (6) statement -> . FUNCTION NAME statement
    (7) statement -> . IF condition THEN statement ELIF condition THEN statement ELSE statement
    (8) statement -> . IF condition THEN statement
    (9) statement -> . IF condition THEN statement ELSE statement
    (10) statement -> . FOR NAME FROM expr TO expr DO statement
    (11) statement -> . WHILE condition statement
    (12) statement -> . var_assign
    (13) statement -> . NAME RUN
    (14) statement -> . array
    (15) statement -> . expr
    (16) statement -> .
    (42) var_assign -> . NAME = bool
    (43) var_assign -> . RETURN NAME
    (44) var_assign -> . NAME = statement
    (45) var_assign -> . NAME = array
    (46) var_assign -> . NAME = expr
    (50) array -> . array [ expr ]
    (51) array -> . array + STRING
    (52) array -> . array + expr
    (53) array -> . array + array
    (54) array -> . NAME
    (55) array -> . [ elements ]
    (17) expr -> . RANDOMRANGE FROM expr TO expr
    (18) expr -> . PRINT TIME
    (19) expr -> . PRINT expr
    (20) expr -> . FLOAT
    (21) expr -> . STRING
    (22) expr -> . NUMBER
    (23) expr -> . NAME
    (24) expr -> . - expr
    (25) expr -> . NUM_INPUT
    (26) expr -> . RAW_INPUT
    (27) expr -> . expr > expr
    (28) expr -> . expr < expr
    (29) expr -> . NOT expr
    (30) expr -> . expr AND expr
    (31) expr -> . expr OR expr
    (32) expr -> . expr EQ_GREATER expr
    (33) expr -> . expr EQ_LESS expr
    (34) expr -> . expr NOT_EQEQ expr
    (35) expr -> . expr / expr
    (36) expr -> . expr * expr
    (37) expr -> . expr - expr
    (38) expr -> . expr ADD expr
    (39) expr -> . expr . expr
  ! shift/reduce conflict for WHILE resolved as shift
    TYPE            shift and go to state 2
    DO              shift and go to state 4
    TIME            shift and go to state 6
    NAME            shift and go to state 3
    CLASS           shift and go to state 7
    FUNCTION        shift and go to state 8
    IF              shift and go to state 9
    FOR             shift and go to state 10
    WHILE           shift and go to state 5
    RETURN          shift and go to state 14
    [               shift and go to state 15
    RANDOMRANGE     shift and go to state 17
    PRINT           shift and go to state 18
    FLOAT           shift and go to state 19
    STRING          shift and go to state 16
    NUMBER          shift and go to state 20
    -               shift and go to state 21
    NUM_INPUT       shift and go to state 22
    RAW_INPUT       shift and go to state 23
    NOT             shift and go to state 24

    statement                      shift and go to state 29
    expr                           shift and go to state 11
    var_assign                     shift and go to state 12
    array                          shift and go to state 13

state 5

    (11) statement -> WHILE . condition statement
    (40) condition -> . expr SHOMARANDE expr
    (41) condition -> . expr EQEQ expr
    (17) expr -> . RANDOMRANGE FROM expr TO expr
    (18) expr -> . PRINT TIME
    (19) expr -> . PRINT expr
    (20) expr -> . FLOAT
    (21) expr -> . STRING
    (22) expr -> . NUMBER
    (23) expr -> . NAME
    (24) expr -> . - expr
    (25) expr -> . NUM_INPUT
    (26) expr -> . RAW_INPUT
    (27) expr -> . expr > expr
    (28) expr -> . expr < expr
    (29) expr -> . NOT expr
    (30) expr -> . expr AND expr
    (31) expr -> . expr OR expr
    (32) expr -> . expr EQ_GREATER expr
    (33) expr -> . expr EQ_LESS expr
    (34) expr -> . expr NOT_EQEQ expr
    (35) expr -> . expr / expr
    (36) expr -> . expr * expr
    (37) expr -> . expr - expr
    (38) expr -> . expr ADD expr
    (39) expr -> . expr . expr
    RANDOMRANGE     shift and go to state 17
    PRINT           shift and go to state 18
    FLOAT           shift and go to state 19
    STRING          shift and go to state 16
    NUMBER          shift and go to state 20
    NAME            shift and go to state 32
    -               shift and go to state 21
    NUM_INPUT       shift and go to state 22
    RAW_INPUT       shift and go to state 23
    NOT             shift and go to state 24

    condition                      shift and go to state 30
    expr                           shift and go to state 31

state 6

    (3) statement -> TIME .
    $end            reduce using rule 3 (statement -> TIME .)
    WHILE           reduce using rule 3 (statement -> TIME .)
    ,               reduce using rule 3 (statement -> TIME .)
    ]               reduce using rule 3 (statement -> TIME .)
    ELIF            reduce using rule 3 (statement -> TIME .)
    ELSE            reduce using rule 3 (statement -> TIME .)


state 7

    (5) statement -> CLASS . NAME : statement
    NAME            shift and go to state 33


state 8

    (6) statement -> FUNCTION . NAME statement
    NAME            shift and go to state 34


state 9

    (7) statement -> IF . condition THEN statement ELIF condition THEN statement ELSE statement
    (8) statement -> IF . condition THEN statement
    (9) statement -> IF . condition THEN statement ELSE statement
    (40) condition -> . expr SHOMARANDE expr
    (41) condition -> . expr EQEQ expr
    (17) expr -> . RANDOMRANGE FROM expr TO expr
    (18) expr -> . PRINT TIME
    (19) expr -> . PRINT expr
    (20) expr -> . FLOAT
    (21) expr -> . STRING
    (22) expr -> . NUMBER
    (23) expr -> . NAME
    (24) expr -> . - expr
    (25) expr -> . NUM_INPUT
    (26) expr -> . RAW_INPUT
    (27) expr -> . expr > expr
    (28) expr -> . expr < expr
    (29) expr -> . NOT expr
    (30) expr -> . expr AND expr
    (31) expr -> . expr OR expr
    (32) expr -> . expr EQ_GREATER expr
    (33) expr -> . expr EQ_LESS expr
    (34) expr -> . expr NOT_EQEQ expr
    (35) expr -> . expr / expr
    (36) expr -> . expr * expr
    (37) expr -> . expr - expr
    (38) expr -> . expr ADD expr
    (39) expr -> . expr . expr
    RANDOMRANGE     shift and go to state 17
    PRINT           shift and go to state 18
    FLOAT           shift and go to state 19
    STRING          shift and go to state 16
    NUMBER          shift and go to state 20
    NAME            shift and go to state 32
    -               shift and go to state 21
    NUM_INPUT       shift and go to state 22
    RAW_INPUT       shift and go to state 23
    NOT             shift and go to state 24

    condition                      shift and go to state 35
    expr                           shift and go to state 31

state 10

    (10) statement -> FOR . NAME FROM expr TO expr DO statement
    NAME            shift and go to state 36


state 11

    (15) statement -> expr .
    (27) expr -> expr . > expr
    (28) expr -> expr . < expr
    (30) expr -> expr . AND expr
    (31) expr -> expr . OR expr
    (32) expr -> expr . EQ_GREATER expr
    (33) expr -> expr . EQ_LESS expr
    (34) expr -> expr . NOT_EQEQ expr
    (35) expr -> expr . / expr
    (36) expr -> expr . * expr
    (37) expr -> expr . - expr
    (38) expr -> expr . ADD expr
    (39) expr -> expr . . expr
    $end            reduce using rule 15 (statement -> expr .)
    WHILE           reduce using rule 15 (statement -> expr .)
    ,               reduce using rule 15 (statement -> expr .)
    ]               reduce using rule 15 (statement -> expr .)
    ELIF            reduce using rule 15 (statement -> expr .)
    ELSE            reduce using rule 15 (statement -> expr .)
    >               shift and go to state 37
    <               shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40
    EQ_GREATER      shift and go to state 41
    EQ_LESS         shift and go to state 42
    NOT_EQEQ        shift and go to state 43
    /               shift and go to state 44
    *               shift and go to state 45
    -               shift and go to state 46
    ADD             shift and go to state 47
    .               shift and go to state 48


state 12

    (12) statement -> var_assign .
    $end            reduce using rule 12 (statement -> var_assign .)
    WHILE           reduce using rule 12 (statement -> var_assign .)
    ,               reduce using rule 12 (statement -> var_assign .)
    ]               reduce using rule 12 (statement -> var_assign .)
    ELIF            reduce using rule 12 (statement -> var_assign .)
    ELSE            reduce using rule 12 (statement -> var_assign .)


state 13

    (14) statement -> array .
    (50) array -> array . [ expr ]
    (51) array -> array . + STRING
    (52) array -> array . + expr
    (53) array -> array . + array
    $end            reduce using rule 14 (statement -> array .)
    WHILE           reduce using rule 14 (statement -> array .)
    ,               reduce using rule 14 (statement -> array .)
    ]               reduce using rule 14 (statement -> array .)
    ELIF            reduce using rule 14 (statement -> array .)
    ELSE            reduce using rule 14 (statement -> array .)
    [               shift and go to state 49
    +               shift and go to state 50


state 14

    (43) var_assign -> RETURN . NAME
    NAME            shift and go to state 51


state 15

    (55) array -> [ . elements ]
    (56) elements -> . statement , elements
    (57) elements -> . statement
    (1) statement -> . TYPE NAME
    (2) statement -> . DO statement WHILE condition
    (3) statement -> . TIME
    (4) statement -> . NAME ( )
    (5) statement -> . CLASS NAME : statement
    (6) statement -> . FUNCTION NAME statement
    (7) statement -> . IF condition THEN statement ELIF condition THEN statement ELSE statement
    (8) statement -> . IF condition THEN statement
    (9) statement -> . IF condition THEN statement ELSE statement
    (10) statement -> . FOR NAME FROM expr TO expr DO statement
    (11) statement -> . WHILE condition statement
    (12) statement -> . var_assign
    (13) statement -> . NAME RUN
    (14) statement -> . array
    (15) statement -> . expr
    (16) statement -> .
    (42) var_assign -> . NAME = bool
    (43) var_assign -> . RETURN NAME
    (44) var_assign -> . NAME = statement
    (45) var_assign -> . NAME = array
    (46) var_assign -> . NAME = expr
    (50) array -> . array [ expr ]
    (51) array -> . array + STRING
    (52) array -> . array + expr
    (53) array -> . array + array
    (54) array -> . NAME
    (55) array -> . [ elements ]
    (17) expr -> . RANDOMRANGE FROM expr TO expr
    (18) expr -> . PRINT TIME
    (19) expr -> . PRINT expr
    (20) expr -> . FLOAT
    (21) expr -> . STRING
    (22) expr -> . NUMBER
    (23) expr -> . NAME
    (24) expr -> . - expr
    (25) expr -> . NUM_INPUT
    (26) expr -> . RAW_INPUT
    (27) expr -> . expr > expr
    (28) expr -> . expr < expr
    (29) expr -> . NOT expr
    (30) expr -> . expr AND expr
    (31) expr -> . expr OR expr
    (32) expr -> . expr EQ_GREATER expr
    (33) expr -> . expr EQ_LESS expr
    (34) expr -> . expr NOT_EQEQ expr
    (35) expr -> . expr / expr
    (36) expr -> . expr * expr
    (37) expr -> . expr - expr
    (38) expr -> . expr ADD expr
    (39) expr -> . expr . expr
    TYPE            shift and go to state 2
    DO              shift and go to state 4
    TIME            shift and go to state 6
    NAME            shift and go to state 3
    CLASS           shift and go to state 7
    FUNCTION        shift and go to state 8
    IF              shift and go to state 9
    FOR             shift and go to state 10
    WHILE           shift and go to state 5
    ,               reduce using rule 16 (statement -> .)
    ]               reduce using rule 16 (statement -> .)
    RETURN          shift and go to state 14
    [               shift and go to state 15
    RANDOMRANGE     shift and go to state 17
    PRINT           shift and go to state 18
    FLOAT           shift and go to state 19
    STRING          shift and go to state 16
    NUMBER          shift and go to state 20
    -               shift and go to state 21
    NUM_INPUT       shift and go to state 22
    RAW_INPUT       shift and go to state 23
    NOT             shift and go to state 24

    elements                       shift and go to state 52
    statement                      shift and go to state 53
    expr                           shift and go to state 11
    var_assign                     shift and go to state 12
    array                          shift and go to state 13

state 16

    (21) expr -> STRING .
    >               reduce using rule 21 (expr -> STRING .)
    <               reduce using rule 21 (expr -> STRING .)
    AND             reduce using rule 21 (expr -> STRING .)
    OR              reduce using rule 21 (expr -> STRING .)
    EQ_GREATER      reduce using rule 21 (expr -> STRING .)
    EQ_LESS         reduce using rule 21 (expr -> STRING .)
    NOT_EQEQ        reduce using rule 21 (expr -> STRING .)
    /               reduce using rule 21 (expr -> STRING .)
    *               reduce using rule 21 (expr -> STRING .)
    -               reduce using rule 21 (expr -> STRING .)
    ADD             reduce using rule 21 (expr -> STRING .)
    .               reduce using rule 21 (expr -> STRING .)
    $end            reduce using rule 21 (expr -> STRING .)
    WHILE           reduce using rule 21 (expr -> STRING .)
    SHOMARANDE      reduce using rule 21 (expr -> STRING .)
    EQEQ            reduce using rule 21 (expr -> STRING .)
    ,               reduce using rule 21 (expr -> STRING .)
    ]               reduce using rule 21 (expr -> STRING .)
    ELIF            reduce using rule 21 (expr -> STRING .)
    ELSE            reduce using rule 21 (expr -> STRING .)
    [               reduce using rule 21 (expr -> STRING .)
    +               reduce using rule 21 (expr -> STRING .)
    TO              reduce using rule 21 (expr -> STRING .)
    TYPE            reduce using rule 21 (expr -> STRING .)
    DO              reduce using rule 21 (expr -> STRING .)
    TIME            reduce using rule 21 (expr -> STRING .)
    NAME            reduce using rule 21 (expr -> STRING .)
    CLASS           reduce using rule 21 (expr -> STRING .)
    FUNCTION        reduce using rule 21 (expr -> STRING .)
    IF              reduce using rule 21 (expr -> STRING .)
    FOR             reduce using rule 21 (expr -> STRING .)
    RETURN          reduce using rule 21 (expr -> STRING .)
    RANDOMRANGE     reduce using rule 21 (expr -> STRING .)
    PRINT           reduce using rule 21 (expr -> STRING .)
    FLOAT           reduce using rule 21 (expr -> STRING .)
    STRING          reduce using rule 21 (expr -> STRING .)
    NUMBER          reduce using rule 21 (expr -> STRING .)
    NUM_INPUT       reduce using rule 21 (expr -> STRING .)
    RAW_INPUT       reduce using rule 21 (expr -> STRING .)
    NOT             reduce using rule 21 (expr -> STRING .)
    THEN            reduce using rule 21 (expr -> STRING .)


state 17

    (17) expr -> RANDOMRANGE . FROM expr TO expr
    FROM            shift and go to state 54


state 18

    (18) expr -> PRINT . TIME
    (19) expr -> PRINT . expr
    (17) expr -> . RANDOMRANGE FROM expr TO expr
    (18) expr -> . PRINT TIME
    (19) expr -> . PRINT expr
    (20) expr -> . FLOAT
    (21) expr -> . STRING
    (22) expr -> . NUMBER
    (23) expr -> . NAME
    (24) expr -> . - expr
    (25) expr -> . NUM_INPUT
    (26) expr -> . RAW_INPUT
    (27) expr -> . expr > expr
    (28) expr -> . expr < expr
    (29) expr -> . NOT expr
    (30) expr -> . expr AND expr
    (31) expr -> . expr OR expr
    (32) expr -> . expr EQ_GREATER expr
    (33) expr -> . expr EQ_LESS expr
    (34) expr -> . expr NOT_EQEQ expr
    (35) expr -> . expr / expr
    (36) expr -> . expr * expr
    (37) expr -> . expr - expr
    (38) expr -> . expr ADD expr
    (39) expr -> . expr . expr
    TIME            shift and go to state 55
    RANDOMRANGE     shift and go to state 17
    PRINT           shift and go to state 18
    FLOAT           shift and go to state 19
    STRING          shift and go to state 16
    NUMBER          shift and go to state 20
    NAME            shift and go to state 32
    -               shift and go to state 21
    NUM_INPUT       shift and go to state 22
    RAW_INPUT       shift and go to state 23
    NOT             shift and go to state 24

    expr                           shift and go to state 56

state 19

    (20) expr -> FLOAT .
    >               reduce using rule 20 (expr -> FLOAT .)
    <               reduce using rule 20 (expr -> FLOAT .)
    AND             reduce using rule 20 (expr -> FLOAT .)
    OR              reduce using rule 20 (expr -> FLOAT .)
    EQ_GREATER      reduce using rule 20 (expr -> FLOAT .)
    EQ_LESS         reduce using rule 20 (expr -> FLOAT .)
    NOT_EQEQ        reduce using rule 20 (expr -> FLOAT .)
    /               reduce using rule 20 (expr -> FLOAT .)
    *               reduce using rule 20 (expr -> FLOAT .)
    -               reduce using rule 20 (expr -> FLOAT .)
    ADD             reduce using rule 20 (expr -> FLOAT .)
    .               reduce using rule 20 (expr -> FLOAT .)
    $end            reduce using rule 20 (expr -> FLOAT .)
    WHILE           reduce using rule 20 (expr -> FLOAT .)
    SHOMARANDE      reduce using rule 20 (expr -> FLOAT .)
    EQEQ            reduce using rule 20 (expr -> FLOAT .)
    ,               reduce using rule 20 (expr -> FLOAT .)
    ]               reduce using rule 20 (expr -> FLOAT .)
    ELIF            reduce using rule 20 (expr -> FLOAT .)
    ELSE            reduce using rule 20 (expr -> FLOAT .)
    [               reduce using rule 20 (expr -> FLOAT .)
    +               reduce using rule 20 (expr -> FLOAT .)
    TO              reduce using rule 20 (expr -> FLOAT .)
    TYPE            reduce using rule 20 (expr -> FLOAT .)
    DO              reduce using rule 20 (expr -> FLOAT .)
    TIME            reduce using rule 20 (expr -> FLOAT .)
    NAME            reduce using rule 20 (expr -> FLOAT .)
    CLASS           reduce using rule 20 (expr -> FLOAT .)
    FUNCTION        reduce using rule 20 (expr -> FLOAT .)
    IF              reduce using rule 20 (expr -> FLOAT .)
    FOR             reduce using rule 20 (expr -> FLOAT .)
    RETURN          reduce using rule 20 (expr -> FLOAT .)
    RANDOMRANGE     reduce using rule 20 (expr -> FLOAT .)
    PRINT           reduce using rule 20 (expr -> FLOAT .)
    FLOAT           reduce using rule 20 (expr -> FLOAT .)
    STRING          reduce using rule 20 (expr -> FLOAT .)
    NUMBER          reduce using rule 20 (expr -> FLOAT .)
    NUM_INPUT       reduce using rule 20 (expr -> FLOAT .)
    RAW_INPUT       reduce using rule 20 (expr -> FLOAT .)
    NOT             reduce using rule 20 (expr -> FLOAT .)
    THEN            reduce using rule 20 (expr -> FLOAT .)


state 20

    (22) expr -> NUMBER .
    >               reduce using rule 22 (expr -> NUMBER .)
    <               reduce using rule 22 (expr -> NUMBER .)
    AND             reduce using rule 22 (expr -> NUMBER .)
    OR              reduce using rule 22 (expr -> NUMBER .)
    EQ_GREATER      reduce using rule 22 (expr -> NUMBER .)
    EQ_LESS         reduce using rule 22 (expr -> NUMBER .)
    NOT_EQEQ        reduce using rule 22 (expr -> NUMBER .)
    /               reduce using rule 22 (expr -> NUMBER .)
    *               reduce using rule 22 (expr -> NUMBER .)
    -               reduce using rule 22 (expr -> NUMBER .)
    ADD             reduce using rule 22 (expr -> NUMBER .)
    .               reduce using rule 22 (expr -> NUMBER .)
    $end            reduce using rule 22 (expr -> NUMBER .)
    WHILE           reduce using rule 22 (expr -> NUMBER .)
    SHOMARANDE      reduce using rule 22 (expr -> NUMBER .)
    EQEQ            reduce using rule 22 (expr -> NUMBER .)
    ,               reduce using rule 22 (expr -> NUMBER .)
    ]               reduce using rule 22 (expr -> NUMBER .)
    ELIF            reduce using rule 22 (expr -> NUMBER .)
    ELSE            reduce using rule 22 (expr -> NUMBER .)
    [               reduce using rule 22 (expr -> NUMBER .)
    +               reduce using rule 22 (expr -> NUMBER .)
    TO              reduce using rule 22 (expr -> NUMBER .)
    TYPE            reduce using rule 22 (expr -> NUMBER .)
    DO              reduce using rule 22 (expr -> NUMBER .)
    TIME            reduce using rule 22 (expr -> NUMBER .)
    NAME            reduce using rule 22 (expr -> NUMBER .)
    CLASS           reduce using rule 22 (expr -> NUMBER .)
    FUNCTION        reduce using rule 22 (expr -> NUMBER .)
    IF              reduce using rule 22 (expr -> NUMBER .)
    FOR             reduce using rule 22 (expr -> NUMBER .)
    RETURN          reduce using rule 22 (expr -> NUMBER .)
    RANDOMRANGE     reduce using rule 22 (expr -> NUMBER .)
    PRINT           reduce using rule 22 (expr -> NUMBER .)
    FLOAT           reduce using rule 22 (expr -> NUMBER .)
    STRING          reduce using rule 22 (expr -> NUMBER .)
    NUMBER          reduce using rule 22 (expr -> NUMBER .)
    NUM_INPUT       reduce using rule 22 (expr -> NUMBER .)
    RAW_INPUT       reduce using rule 22 (expr -> NUMBER .)
    NOT             reduce using rule 22 (expr -> NUMBER .)
    THEN            reduce using rule 22 (expr -> NUMBER .)


state 21

    (24) expr -> - . expr
    (17) expr -> . RANDOMRANGE FROM expr TO expr
    (18) expr -> . PRINT TIME
    (19) expr -> . PRINT expr
    (20) expr -> . FLOAT
    (21) expr -> . STRING
    (22) expr -> . NUMBER
    (23) expr -> . NAME
    (24) expr -> . - expr
    (25) expr -> . NUM_INPUT
    (26) expr -> . RAW_INPUT
    (27) expr -> . expr > expr
    (28) expr -> . expr < expr
    (29) expr -> . NOT expr
    (30) expr -> . expr AND expr
    (31) expr -> . expr OR expr
    (32) expr -> . expr EQ_GREATER expr
    (33) expr -> . expr EQ_LESS expr
    (34) expr -> . expr NOT_EQEQ expr
    (35) expr -> . expr / expr
    (36) expr -> . expr * expr
    (37) expr -> . expr - expr
    (38) expr -> . expr ADD expr
    (39) expr -> . expr . expr
    RANDOMRANGE     shift and go to state 17
    PRINT           shift and go to state 18
    FLOAT           shift and go to state 19
    STRING          shift and go to state 16
    NUMBER          shift and go to state 20
    NAME            shift and go to state 32
    -               shift and go to state 21
    NUM_INPUT       shift and go to state 22
    RAW_INPUT       shift and go to state 23
    NOT             shift and go to state 24

    expr                           shift and go to state 57

state 22

    (25) expr -> NUM_INPUT .
    >               reduce using rule 25 (expr -> NUM_INPUT .)
    <               reduce using rule 25 (expr -> NUM_INPUT .)
    AND             reduce using rule 25 (expr -> NUM_INPUT .)
    OR              reduce using rule 25 (expr -> NUM_INPUT .)
    EQ_GREATER      reduce using rule 25 (expr -> NUM_INPUT .)
    EQ_LESS         reduce using rule 25 (expr -> NUM_INPUT .)
    NOT_EQEQ        reduce using rule 25 (expr -> NUM_INPUT .)
    /               reduce using rule 25 (expr -> NUM_INPUT .)
    *               reduce using rule 25 (expr -> NUM_INPUT .)
    -               reduce using rule 25 (expr -> NUM_INPUT .)
    ADD             reduce using rule 25 (expr -> NUM_INPUT .)
    .               reduce using rule 25 (expr -> NUM_INPUT .)
    $end            reduce using rule 25 (expr -> NUM_INPUT .)
    WHILE           reduce using rule 25 (expr -> NUM_INPUT .)
    SHOMARANDE      reduce using rule 25 (expr -> NUM_INPUT .)
    EQEQ            reduce using rule 25 (expr -> NUM_INPUT .)
    ,               reduce using rule 25 (expr -> NUM_INPUT .)
    ]               reduce using rule 25 (expr -> NUM_INPUT .)
    ELIF            reduce using rule 25 (expr -> NUM_INPUT .)
    ELSE            reduce using rule 25 (expr -> NUM_INPUT .)
    [               reduce using rule 25 (expr -> NUM_INPUT .)
    +               reduce using rule 25 (expr -> NUM_INPUT .)
    TO              reduce using rule 25 (expr -> NUM_INPUT .)
    TYPE            reduce using rule 25 (expr -> NUM_INPUT .)
    DO              reduce using rule 25 (expr -> NUM_INPUT .)
    TIME            reduce using rule 25 (expr -> NUM_INPUT .)
    NAME            reduce using rule 25 (expr -> NUM_INPUT .)
    CLASS           reduce using rule 25 (expr -> NUM_INPUT .)
    FUNCTION        reduce using rule 25 (expr -> NUM_INPUT .)
    IF              reduce using rule 25 (expr -> NUM_INPUT .)
    FOR             reduce using rule 25 (expr -> NUM_INPUT .)
    RETURN          reduce using rule 25 (expr -> NUM_INPUT .)
    RANDOMRANGE     reduce using rule 25 (expr -> NUM_INPUT .)
    PRINT           reduce using rule 25 (expr -> NUM_INPUT .)
    FLOAT           reduce using rule 25 (expr -> NUM_INPUT .)
    STRING          reduce using rule 25 (expr -> NUM_INPUT .)
    NUMBER          reduce using rule 25 (expr -> NUM_INPUT .)
    NUM_INPUT       reduce using rule 25 (expr -> NUM_INPUT .)
    RAW_INPUT       reduce using rule 25 (expr -> NUM_INPUT .)
    NOT             reduce using rule 25 (expr -> NUM_INPUT .)
    THEN            reduce using rule 25 (expr -> NUM_INPUT .)


state 23

    (26) expr -> RAW_INPUT .
    >               reduce using rule 26 (expr -> RAW_INPUT .)
    <               reduce using rule 26 (expr -> RAW_INPUT .)
    AND             reduce using rule 26 (expr -> RAW_INPUT .)
    OR              reduce using rule 26 (expr -> RAW_INPUT .)
    EQ_GREATER      reduce using rule 26 (expr -> RAW_INPUT .)
    EQ_LESS         reduce using rule 26 (expr -> RAW_INPUT .)
    NOT_EQEQ        reduce using rule 26 (expr -> RAW_INPUT .)
    /               reduce using rule 26 (expr -> RAW_INPUT .)
    *               reduce using rule 26 (expr -> RAW_INPUT .)
    -               reduce using rule 26 (expr -> RAW_INPUT .)
    ADD             reduce using rule 26 (expr -> RAW_INPUT .)
    .               reduce using rule 26 (expr -> RAW_INPUT .)
    $end            reduce using rule 26 (expr -> RAW_INPUT .)
    WHILE           reduce using rule 26 (expr -> RAW_INPUT .)
    SHOMARANDE      reduce using rule 26 (expr -> RAW_INPUT .)
    EQEQ            reduce using rule 26 (expr -> RAW_INPUT .)
    ,               reduce using rule 26 (expr -> RAW_INPUT .)
    ]               reduce using rule 26 (expr -> RAW_INPUT .)
    ELIF            reduce using rule 26 (expr -> RAW_INPUT .)
    ELSE            reduce using rule 26 (expr -> RAW_INPUT .)
    [               reduce using rule 26 (expr -> RAW_INPUT .)
    +               reduce using rule 26 (expr -> RAW_INPUT .)
    TO              reduce using rule 26 (expr -> RAW_INPUT .)
    TYPE            reduce using rule 26 (expr -> RAW_INPUT .)
    DO              reduce using rule 26 (expr -> RAW_INPUT .)
    TIME            reduce using rule 26 (expr -> RAW_INPUT .)
    NAME            reduce using rule 26 (expr -> RAW_INPUT .)
    CLASS           reduce using rule 26 (expr -> RAW_INPUT .)
    FUNCTION        reduce using rule 26 (expr -> RAW_INPUT .)
    IF              reduce using rule 26 (expr -> RAW_INPUT .)
    FOR             reduce using rule 26 (expr -> RAW_INPUT .)
    RETURN          reduce using rule 26 (expr -> RAW_INPUT .)
    RANDOMRANGE     reduce using rule 26 (expr -> RAW_INPUT .)
    PRINT           reduce using rule 26 (expr -> RAW_INPUT .)
    FLOAT           reduce using rule 26 (expr -> RAW_INPUT .)
    STRING          reduce using rule 26 (expr -> RAW_INPUT .)
    NUMBER          reduce using rule 26 (expr -> RAW_INPUT .)
    NUM_INPUT       reduce using rule 26 (expr -> RAW_INPUT .)
    RAW_INPUT       reduce using rule 26 (expr -> RAW_INPUT .)
    NOT             reduce using rule 26 (expr -> RAW_INPUT .)
    THEN            reduce using rule 26 (expr -> RAW_INPUT .)


state 24

    (29) expr -> NOT . expr
    (17) expr -> . RANDOMRANGE FROM expr TO expr
    (18) expr -> . PRINT TIME
    (19) expr -> . PRINT expr
    (20) expr -> . FLOAT
    (21) expr -> . STRING
    (22) expr -> . NUMBER
    (23) expr -> . NAME
    (24) expr -> . - expr
    (25) expr -> . NUM_INPUT
    (26) expr -> . RAW_INPUT
    (27) expr -> . expr > expr
    (28) expr -> . expr < expr
    (29) expr -> . NOT expr
    (30) expr -> . expr AND expr
    (31) expr -> . expr OR expr
    (32) expr -> . expr EQ_GREATER expr
    (33) expr -> . expr EQ_LESS expr
    (34) expr -> . expr NOT_EQEQ expr
    (35) expr -> . expr / expr
    (36) expr -> . expr * expr
    (37) expr -> . expr - expr
    (38) expr -> . expr ADD expr
    (39) expr -> . expr . expr
    RANDOMRANGE     shift and go to state 17
    PRINT           shift and go to state 18
    FLOAT           shift and go to state 19
    STRING          shift and go to state 16
    NUMBER          shift and go to state 20
    NAME            shift and go to state 32
    -               shift and go to state 21
    NUM_INPUT       shift and go to state 22
    RAW_INPUT       shift and go to state 23
    NOT             shift and go to state 24

    expr                           shift and go to state 58

state 25

    (1) statement -> TYPE NAME .
    $end            reduce using rule 1 (statement -> TYPE NAME .)
    WHILE           reduce using rule 1 (statement -> TYPE NAME .)
    ,               reduce using rule 1 (statement -> TYPE NAME .)
    ]               reduce using rule 1 (statement -> TYPE NAME .)
    ELIF            reduce using rule 1 (statement -> TYPE NAME .)
    ELSE            reduce using rule 1 (statement -> TYPE NAME .)


state 26

    (4) statement -> NAME ( . )
    )               shift and go to state 59


state 27

    (13) statement -> NAME RUN .
    $end            reduce using rule 13 (statement -> NAME RUN .)
    WHILE           reduce using rule 13 (statement -> NAME RUN .)
    ,               reduce using rule 13 (statement -> NAME RUN .)
    ]               reduce using rule 13 (statement -> NAME RUN .)
    ELIF            reduce using rule 13 (statement -> NAME RUN .)
    ELSE            reduce using rule 13 (statement -> NAME RUN .)


state 28

    (42) var_assign -> NAME = . bool
    (44) var_assign -> NAME = . statement
    (45) var_assign -> NAME = . array
    (46) var_assign -> NAME = . expr
    (47) bool -> . NOT bool
    (48) bool -> . bool ANDALSO bool
    (49) bool -> . BOOLEAN
    (1) statement -> . TYPE NAME
    (2) statement -> . DO statement WHILE condition
    (3) statement -> . TIME
    (4) statement -> . NAME ( )
    (5) statement -> . CLASS NAME : statement
    (6) statement -> . FUNCTION NAME statement
    (7) statement -> . IF condition THEN statement ELIF condition THEN statement ELSE statement
    (8) statement -> . IF condition THEN statement
    (9) statement -> . IF condition THEN statement ELSE statement
    (10) statement -> . FOR NAME FROM expr TO expr DO statement
    (11) statement -> . WHILE condition statement
    (12) statement -> . var_assign
    (13) statement -> . NAME RUN
    (14) statement -> . array
    (15) statement -> . expr
    (16) statement -> .
    (50) array -> . array [ expr ]
    (51) array -> . array + STRING
    (52) array -> . array + expr
    (53) array -> . array + array
    (54) array -> . NAME
    (55) array -> . [ elements ]
    (17) expr -> . RANDOMRANGE FROM expr TO expr
    (18) expr -> . PRINT TIME
    (19) expr -> . PRINT expr
    (20) expr -> . FLOAT
    (21) expr -> . STRING
    (22) expr -> . NUMBER
    (23) expr -> . NAME
    (24) expr -> . - expr
    (25) expr -> . NUM_INPUT
    (26) expr -> . RAW_INPUT
    (27) expr -> . expr > expr
    (28) expr -> . expr < expr
    (29) expr -> . NOT expr
    (30) expr -> . expr AND expr
    (31) expr -> . expr OR expr
    (32) expr -> . expr EQ_GREATER expr
    (33) expr -> . expr EQ_LESS expr
    (34) expr -> . expr NOT_EQEQ expr
    (35) expr -> . expr / expr
    (36) expr -> . expr * expr
    (37) expr -> . expr - expr
    (38) expr -> . expr ADD expr
    (39) expr -> . expr . expr
    (42) var_assign -> . NAME = bool
    (43) var_assign -> . RETURN NAME
    (44) var_assign -> . NAME = statement
    (45) var_assign -> . NAME = array
    (46) var_assign -> . NAME = expr
  ! shift/reduce conflict for WHILE resolved as shift
    NOT             shift and go to state 65
    BOOLEAN         shift and go to state 66
    TYPE            shift and go to state 2
    DO              shift and go to state 4
    TIME            shift and go to state 6
    NAME            shift and go to state 60
    CLASS           shift and go to state 7
    FUNCTION        shift and go to state 8
    IF              shift and go to state 9
    FOR             shift and go to state 10
    WHILE           shift and go to state 5
    $end            reduce using rule 16 (statement -> .)
    ,               reduce using rule 16 (statement -> .)
    ]               reduce using rule 16 (statement -> .)
    ELIF            reduce using rule 16 (statement -> .)
    ELSE            reduce using rule 16 (statement -> .)
    [               shift and go to state 15
    RANDOMRANGE     shift and go to state 17
    PRINT           shift and go to state 18
    FLOAT           shift and go to state 19
    STRING          shift and go to state 16
    NUMBER          shift and go to state 20
    -               shift and go to state 21
    NUM_INPUT       shift and go to state 22
    RAW_INPUT       shift and go to state 23
    RETURN          shift and go to state 14

    bool                           shift and go to state 61
    statement                      shift and go to state 62
    array                          shift and go to state 63
    expr                           shift and go to state 64
    var_assign                     shift and go to state 12

state 29

    (2) statement -> DO statement . WHILE condition
    WHILE           shift and go to state 67


state 30

    (11) statement -> WHILE condition . statement
    (1) statement -> . TYPE NAME
    (2) statement -> . DO statement WHILE condition
    (3) statement -> . TIME
    (4) statement -> . NAME ( )
    (5) statement -> . CLASS NAME : statement
    (6) statement -> . FUNCTION NAME statement
    (7) statement -> . IF condition THEN statement ELIF condition THEN statement ELSE statement
    (8) statement -> . IF condition THEN statement
    (9) statement -> . IF condition THEN statement ELSE statement
    (10) statement -> . FOR NAME FROM expr TO expr DO statement
    (11) statement -> . WHILE condition statement
    (12) statement -> . var_assign
    (13) statement -> . NAME RUN
    (14) statement -> . array
    (15) statement -> . expr
    (16) statement -> .
    (42) var_assign -> . NAME = bool
    (43) var_assign -> . RETURN NAME
    (44) var_assign -> . NAME = statement
    (45) var_assign -> . NAME = array
    (46) var_assign -> . NAME = expr
    (50) array -> . array [ expr ]
    (51) array -> . array + STRING
    (52) array -> . array + expr
    (53) array -> . array + array
    (54) array -> . NAME
    (55) array -> . [ elements ]
    (17) expr -> . RANDOMRANGE FROM expr TO expr
    (18) expr -> . PRINT TIME
    (19) expr -> . PRINT expr
    (20) expr -> . FLOAT
    (21) expr -> . STRING
    (22) expr -> . NUMBER
    (23) expr -> . NAME
    (24) expr -> . - expr
    (25) expr -> . NUM_INPUT
    (26) expr -> . RAW_INPUT
    (27) expr -> . expr > expr
    (28) expr -> . expr < expr
    (29) expr -> . NOT expr
    (30) expr -> . expr AND expr
    (31) expr -> . expr OR expr
    (32) expr -> . expr EQ_GREATER expr
    (33) expr -> . expr EQ_LESS expr
    (34) expr -> . expr NOT_EQEQ expr
    (35) expr -> . expr / expr
    (36) expr -> . expr * expr
    (37) expr -> . expr - expr
    (38) expr -> . expr ADD expr
    (39) expr -> . expr . expr
  ! shift/reduce conflict for WHILE resolved as shift
    TYPE            shift and go to state 2
    DO              shift and go to state 4
    TIME            shift and go to state 6
    NAME            shift and go to state 3
    CLASS           shift and go to state 7
    FUNCTION        shift and go to state 8
    IF              shift and go to state 9
    FOR             shift and go to state 10
    WHILE           shift and go to state 5
    $end            reduce using rule 16 (statement -> .)
    ,               reduce using rule 16 (statement -> .)
    ]               reduce using rule 16 (statement -> .)
    ELIF            reduce using rule 16 (statement -> .)
    ELSE            reduce using rule 16 (statement -> .)
    RETURN          shift and go to state 14
    [               shift and go to state 15
    RANDOMRANGE     shift and go to state 17
    PRINT           shift and go to state 18
    FLOAT           shift and go to state 19
    STRING          shift and go to state 16
    NUMBER          shift and go to state 20
    -               shift and go to state 21
    NUM_INPUT       shift and go to state 22
    RAW_INPUT       shift and go to state 23
    NOT             shift and go to state 24

    statement                      shift and go to state 68
    expr                           shift and go to state 11
    var_assign                     shift and go to state 12
    array                          shift and go to state 13

state 31

    (40) condition -> expr . SHOMARANDE expr
    (41) condition -> expr . EQEQ expr
    (27) expr -> expr . > expr
    (28) expr -> expr . < expr
    (30) expr -> expr . AND expr
    (31) expr -> expr . OR expr
    (32) expr -> expr . EQ_GREATER expr
    (33) expr -> expr . EQ_LESS expr
    (34) expr -> expr . NOT_EQEQ expr
    (35) expr -> expr . / expr
    (36) expr -> expr . * expr
    (37) expr -> expr . - expr
    (38) expr -> expr . ADD expr
    (39) expr -> expr . . expr
    SHOMARANDE      shift and go to state 69
    EQEQ            shift and go to state 70
    >               shift and go to state 37
    <               shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40
    EQ_GREATER      shift and go to state 41
    EQ_LESS         shift and go to state 42
    NOT_EQEQ        shift and go to state 43
    /               shift and go to state 44
    *               shift and go to state 45
    -               shift and go to state 46
    ADD             shift and go to state 47
    .               shift and go to state 48


state 32

    (23) expr -> NAME .
    SHOMARANDE      reduce using rule 23 (expr -> NAME .)
    EQEQ            reduce using rule 23 (expr -> NAME .)
    >               reduce using rule 23 (expr -> NAME .)
    <               reduce using rule 23 (expr -> NAME .)
    AND             reduce using rule 23 (expr -> NAME .)
    OR              reduce using rule 23 (expr -> NAME .)
    EQ_GREATER      reduce using rule 23 (expr -> NAME .)
    EQ_LESS         reduce using rule 23 (expr -> NAME .)
    NOT_EQEQ        reduce using rule 23 (expr -> NAME .)
    /               reduce using rule 23 (expr -> NAME .)
    *               reduce using rule 23 (expr -> NAME .)
    -               reduce using rule 23 (expr -> NAME .)
    ADD             reduce using rule 23 (expr -> NAME .)
    .               reduce using rule 23 (expr -> NAME .)
    $end            reduce using rule 23 (expr -> NAME .)
    WHILE           reduce using rule 23 (expr -> NAME .)
    ,               reduce using rule 23 (expr -> NAME .)
    ]               reduce using rule 23 (expr -> NAME .)
    ELIF            reduce using rule 23 (expr -> NAME .)
    ELSE            reduce using rule 23 (expr -> NAME .)
    [               reduce using rule 23 (expr -> NAME .)
    +               reduce using rule 23 (expr -> NAME .)
    TO              reduce using rule 23 (expr -> NAME .)
    TYPE            reduce using rule 23 (expr -> NAME .)
    DO              reduce using rule 23 (expr -> NAME .)
    TIME            reduce using rule 23 (expr -> NAME .)
    NAME            reduce using rule 23 (expr -> NAME .)
    CLASS           reduce using rule 23 (expr -> NAME .)
    FUNCTION        reduce using rule 23 (expr -> NAME .)
    IF              reduce using rule 23 (expr -> NAME .)
    FOR             reduce using rule 23 (expr -> NAME .)
    RETURN          reduce using rule 23 (expr -> NAME .)
    RANDOMRANGE     reduce using rule 23 (expr -> NAME .)
    PRINT           reduce using rule 23 (expr -> NAME .)
    FLOAT           reduce using rule 23 (expr -> NAME .)
    STRING          reduce using rule 23 (expr -> NAME .)
    NUMBER          reduce using rule 23 (expr -> NAME .)
    NUM_INPUT       reduce using rule 23 (expr -> NAME .)
    RAW_INPUT       reduce using rule 23 (expr -> NAME .)
    NOT             reduce using rule 23 (expr -> NAME .)
    THEN            reduce using rule 23 (expr -> NAME .)


state 33

    (5) statement -> CLASS NAME . : statement
    :               shift and go to state 71


state 34

    (6) statement -> FUNCTION NAME . statement
    (1) statement -> . TYPE NAME
    (2) statement -> . DO statement WHILE condition
    (3) statement -> . TIME
    (4) statement -> . NAME ( )
    (5) statement -> . CLASS NAME : statement
    (6) statement -> . FUNCTION NAME statement
    (7) statement -> . IF condition THEN statement ELIF condition THEN statement ELSE statement
    (8) statement -> . IF condition THEN statement
    (9) statement -> . IF condition THEN statement ELSE statement
    (10) statement -> . FOR NAME FROM expr TO expr DO statement
    (11) statement -> . WHILE condition statement
    (12) statement -> . var_assign
    (13) statement -> . NAME RUN
    (14) statement -> . array
    (15) statement -> . expr
    (16) statement -> .
    (42) var_assign -> . NAME = bool
    (43) var_assign -> . RETURN NAME
    (44) var_assign -> . NAME = statement
    (45) var_assign -> . NAME = array
    (46) var_assign -> . NAME = expr
    (50) array -> . array [ expr ]
    (51) array -> . array + STRING
    (52) array -> . array + expr
    (53) array -> . array + array
    (54) array -> . NAME
    (55) array -> . [ elements ]
    (17) expr -> . RANDOMRANGE FROM expr TO expr
    (18) expr -> . PRINT TIME
    (19) expr -> . PRINT expr
    (20) expr -> . FLOAT
    (21) expr -> . STRING
    (22) expr -> . NUMBER
    (23) expr -> . NAME
    (24) expr -> . - expr
    (25) expr -> . NUM_INPUT
    (26) expr -> . RAW_INPUT
    (27) expr -> . expr > expr
    (28) expr -> . expr < expr
    (29) expr -> . NOT expr
    (30) expr -> . expr AND expr
    (31) expr -> . expr OR expr
    (32) expr -> . expr EQ_GREATER expr
    (33) expr -> . expr EQ_LESS expr
    (34) expr -> . expr NOT_EQEQ expr
    (35) expr -> . expr / expr
    (36) expr -> . expr * expr
    (37) expr -> . expr - expr
    (38) expr -> . expr ADD expr
    (39) expr -> . expr . expr
  ! shift/reduce conflict for WHILE resolved as shift
    TYPE            shift and go to state 2
    DO              shift and go to state 4
    TIME            shift and go to state 6
    NAME            shift and go to state 3
    CLASS           shift and go to state 7
    FUNCTION        shift and go to state 8
    IF              shift and go to state 9
    FOR             shift and go to state 10
    WHILE           shift and go to state 5
    $end            reduce using rule 16 (statement -> .)
    ,               reduce using rule 16 (statement -> .)
    ]               reduce using rule 16 (statement -> .)
    ELIF            reduce using rule 16 (statement -> .)
    ELSE            reduce using rule 16 (statement -> .)
    RETURN          shift and go to state 14
    [               shift and go to state 15
    RANDOMRANGE     shift and go to state 17
    PRINT           shift and go to state 18
    FLOAT           shift and go to state 19
    STRING          shift and go to state 16
    NUMBER          shift and go to state 20
    -               shift and go to state 21
    NUM_INPUT       shift and go to state 22
    RAW_INPUT       shift and go to state 23
    NOT             shift and go to state 24

    statement                      shift and go to state 72
    expr                           shift and go to state 11
    var_assign                     shift and go to state 12
    array                          shift and go to state 13

state 35

    (7) statement -> IF condition . THEN statement ELIF condition THEN statement ELSE statement
    (8) statement -> IF condition . THEN statement
    (9) statement -> IF condition . THEN statement ELSE statement
    THEN            shift and go to state 73


state 36

    (10) statement -> FOR NAME . FROM expr TO expr DO statement
    FROM            shift and go to state 74


state 37

    (27) expr -> expr > . expr
    (17) expr -> . RANDOMRANGE FROM expr TO expr
    (18) expr -> . PRINT TIME
    (19) expr -> . PRINT expr
    (20) expr -> . FLOAT
    (21) expr -> . STRING
    (22) expr -> . NUMBER
    (23) expr -> . NAME
    (24) expr -> . - expr
    (25) expr -> . NUM_INPUT
    (26) expr -> . RAW_INPUT
    (27) expr -> . expr > expr
    (28) expr -> . expr < expr
    (29) expr -> . NOT expr
    (30) expr -> . expr AND expr
    (31) expr -> . expr OR expr
    (32) expr -> . expr EQ_GREATER expr
    (33) expr -> . expr EQ_LESS expr
    (34) expr -> . expr NOT_EQEQ expr
    (35) expr -> . expr / expr
    (36) expr -> . expr * expr
    (37) expr -> . expr - expr
    (38) expr -> . expr ADD expr
    (39) expr -> . expr . expr
    RANDOMRANGE     shift and go to state 17
    PRINT           shift and go to state 18
    FLOAT           shift and go to state 19
    STRING          shift and go to state 16
    NUMBER          shift and go to state 20
    NAME            shift and go to state 32
    -               shift and go to state 21
    NUM_INPUT       shift and go to state 22
    RAW_INPUT       shift and go to state 23
    NOT             shift and go to state 24

    expr                           shift and go to state 75

state 38

    (28) expr -> expr < . expr
    (17) expr -> . RANDOMRANGE FROM expr TO expr
    (18) expr -> . PRINT TIME
    (19) expr -> . PRINT expr
    (20) expr -> . FLOAT
    (21) expr -> . STRING
    (22) expr -> . NUMBER
    (23) expr -> . NAME
    (24) expr -> . - expr
    (25) expr -> . NUM_INPUT
    (26) expr -> . RAW_INPUT
    (27) expr -> . expr > expr
    (28) expr -> . expr < expr
    (29) expr -> . NOT expr
    (30) expr -> . expr AND expr
    (31) expr -> . expr OR expr
    (32) expr -> . expr EQ_GREATER expr
    (33) expr -> . expr EQ_LESS expr
    (34) expr -> . expr NOT_EQEQ expr
    (35) expr -> . expr / expr
    (36) expr -> . expr * expr
    (37) expr -> . expr - expr
    (38) expr -> . expr ADD expr
    (39) expr -> . expr . expr
    RANDOMRANGE     shift and go to state 17
    PRINT           shift and go to state 18
    FLOAT           shift and go to state 19
    STRING          shift and go to state 16
    NUMBER          shift and go to state 20
    NAME            shift and go to state 32
    -               shift and go to state 21
    NUM_INPUT       shift and go to state 22
    RAW_INPUT       shift and go to state 23
    NOT             shift and go to state 24

    expr                           shift and go to state 76

state 39

    (30) expr -> expr AND . expr
    (17) expr -> . RANDOMRANGE FROM expr TO expr
    (18) expr -> . PRINT TIME
    (19) expr -> . PRINT expr
    (20) expr -> . FLOAT
    (21) expr -> . STRING
    (22) expr -> . NUMBER
    (23) expr -> . NAME
    (24) expr -> . - expr
    (25) expr -> . NUM_INPUT
    (26) expr -> . RAW_INPUT
    (27) expr -> . expr > expr
    (28) expr -> . expr < expr
    (29) expr -> . NOT expr
    (30) expr -> . expr AND expr
    (31) expr -> . expr OR expr
    (32) expr -> . expr EQ_GREATER expr
    (33) expr -> . expr EQ_LESS expr
    (34) expr -> . expr NOT_EQEQ expr
    (35) expr -> . expr / expr
    (36) expr -> . expr * expr
    (37) expr -> . expr - expr
    (38) expr -> . expr ADD expr
    (39) expr -> . expr . expr
    RANDOMRANGE     shift and go to state 17
    PRINT           shift and go to state 18
    FLOAT           shift and go to state 19
    STRING          shift and go to state 16
    NUMBER          shift and go to state 20
    NAME            shift and go to state 32
    -               shift and go to state 21
    NUM_INPUT       shift and go to state 22
    RAW_INPUT       shift and go to state 23
    NOT             shift and go to state 24

    expr                           shift and go to state 77

state 40

    (31) expr -> expr OR . expr
    (17) expr -> . RANDOMRANGE FROM expr TO expr
    (18) expr -> . PRINT TIME
    (19) expr -> . PRINT expr
    (20) expr -> . FLOAT
    (21) expr -> . STRING
    (22) expr -> . NUMBER
    (23) expr -> . NAME
    (24) expr -> . - expr
    (25) expr -> . NUM_INPUT
    (26) expr -> . RAW_INPUT
    (27) expr -> . expr > expr
    (28) expr -> . expr < expr
    (29) expr -> . NOT expr
    (30) expr -> . expr AND expr
    (31) expr -> . expr OR expr
    (32) expr -> . expr EQ_GREATER expr
    (33) expr -> . expr EQ_LESS expr
    (34) expr -> . expr NOT_EQEQ expr
    (35) expr -> . expr / expr
    (36) expr -> . expr * expr
    (37) expr -> . expr - expr
    (38) expr -> . expr ADD expr
    (39) expr -> . expr . expr
    RANDOMRANGE     shift and go to state 17
    PRINT           shift and go to state 18
    FLOAT           shift and go to state 19
    STRING          shift and go to state 16
    NUMBER          shift and go to state 20
    NAME            shift and go to state 32
    -               shift and go to state 21
    NUM_INPUT       shift and go to state 22
    RAW_INPUT       shift and go to state 23
    NOT             shift and go to state 24

    expr                           shift and go to state 78

state 41

    (32) expr -> expr EQ_GREATER . expr
    (17) expr -> . RANDOMRANGE FROM expr TO expr
    (18) expr -> . PRINT TIME
    (19) expr -> . PRINT expr
    (20) expr -> . FLOAT
    (21) expr -> . STRING
    (22) expr -> . NUMBER
    (23) expr -> . NAME
    (24) expr -> . - expr
    (25) expr -> . NUM_INPUT
    (26) expr -> . RAW_INPUT
    (27) expr -> . expr > expr
    (28) expr -> . expr < expr
    (29) expr -> . NOT expr
    (30) expr -> . expr AND expr
    (31) expr -> . expr OR expr
    (32) expr -> . expr EQ_GREATER expr
    (33) expr -> . expr EQ_LESS expr
    (34) expr -> . expr NOT_EQEQ expr
    (35) expr -> . expr / expr
    (36) expr -> . expr * expr
    (37) expr -> . expr - expr
    (38) expr -> . expr ADD expr
    (39) expr -> . expr . expr
    RANDOMRANGE     shift and go to state 17
    PRINT           shift and go to state 18
    FLOAT           shift and go to state 19
    STRING          shift and go to state 16
    NUMBER          shift and go to state 20
    NAME            shift and go to state 32
    -               shift and go to state 21
    NUM_INPUT       shift and go to state 22
    RAW_INPUT       shift and go to state 23
    NOT             shift and go to state 24

    expr                           shift and go to state 79

state 42

    (33) expr -> expr EQ_LESS . expr
    (17) expr -> . RANDOMRANGE FROM expr TO expr
    (18) expr -> . PRINT TIME
    (19) expr -> . PRINT expr
    (20) expr -> . FLOAT
    (21) expr -> . STRING
    (22) expr -> . NUMBER
    (23) expr -> . NAME
    (24) expr -> . - expr
    (25) expr -> . NUM_INPUT
    (26) expr -> . RAW_INPUT
    (27) expr -> . expr > expr
    (28) expr -> . expr < expr
    (29) expr -> . NOT expr
    (30) expr -> . expr AND expr
    (31) expr -> . expr OR expr
    (32) expr -> . expr EQ_GREATER expr
    (33) expr -> . expr EQ_LESS expr
    (34) expr -> . expr NOT_EQEQ expr
    (35) expr -> . expr / expr
    (36) expr -> . expr * expr
    (37) expr -> . expr - expr
    (38) expr -> . expr ADD expr
    (39) expr -> . expr . expr
    RANDOMRANGE     shift and go to state 17
    PRINT           shift and go to state 18
    FLOAT           shift and go to state 19
    STRING          shift and go to state 16
    NUMBER          shift and go to state 20
    NAME            shift and go to state 32
    -               shift and go to state 21
    NUM_INPUT       shift and go to state 22
    RAW_INPUT       shift and go to state 23
    NOT             shift and go to state 24

    expr                           shift and go to state 80

state 43

    (34) expr -> expr NOT_EQEQ . expr
    (17) expr -> . RANDOMRANGE FROM expr TO expr
    (18) expr -> . PRINT TIME
    (19) expr -> . PRINT expr
    (20) expr -> . FLOAT
    (21) expr -> . STRING
    (22) expr -> . NUMBER
    (23) expr -> . NAME
    (24) expr -> . - expr
    (25) expr -> . NUM_INPUT
    (26) expr -> . RAW_INPUT
    (27) expr -> . expr > expr
    (28) expr -> . expr < expr
    (29) expr -> . NOT expr
    (30) expr -> . expr AND expr
    (31) expr -> . expr OR expr
    (32) expr -> . expr EQ_GREATER expr
    (33) expr -> . expr EQ_LESS expr
    (34) expr -> . expr NOT_EQEQ expr
    (35) expr -> . expr / expr
    (36) expr -> . expr * expr
    (37) expr -> . expr - expr
    (38) expr -> . expr ADD expr
    (39) expr -> . expr . expr
    RANDOMRANGE     shift and go to state 17
    PRINT           shift and go to state 18
    FLOAT           shift and go to state 19
    STRING          shift and go to state 16
    NUMBER          shift and go to state 20
    NAME            shift and go to state 32
    -               shift and go to state 21
    NUM_INPUT       shift and go to state 22
    RAW_INPUT       shift and go to state 23
    NOT             shift and go to state 24

    expr                           shift and go to state 81

state 44

    (35) expr -> expr / . expr
    (17) expr -> . RANDOMRANGE FROM expr TO expr
    (18) expr -> . PRINT TIME
    (19) expr -> . PRINT expr
    (20) expr -> . FLOAT
    (21) expr -> . STRING
    (22) expr -> . NUMBER
    (23) expr -> . NAME
    (24) expr -> . - expr
    (25) expr -> . NUM_INPUT
    (26) expr -> . RAW_INPUT
    (27) expr -> . expr > expr
    (28) expr -> . expr < expr
    (29) expr -> . NOT expr
    (30) expr -> . expr AND expr
    (31) expr -> . expr OR expr
    (32) expr -> . expr EQ_GREATER expr
    (33) expr -> . expr EQ_LESS expr
    (34) expr -> . expr NOT_EQEQ expr
    (35) expr -> . expr / expr
    (36) expr -> . expr * expr
    (37) expr -> . expr - expr
    (38) expr -> . expr ADD expr
    (39) expr -> . expr . expr
    RANDOMRANGE     shift and go to state 17
    PRINT           shift and go to state 18
    FLOAT           shift and go to state 19
    STRING          shift and go to state 16
    NUMBER          shift and go to state 20
    NAME            shift and go to state 32
    -               shift and go to state 21
    NUM_INPUT       shift and go to state 22
    RAW_INPUT       shift and go to state 23
    NOT             shift and go to state 24

    expr                           shift and go to state 82

state 45

    (36) expr -> expr * . expr
    (17) expr -> . RANDOMRANGE FROM expr TO expr
    (18) expr -> . PRINT TIME
    (19) expr -> . PRINT expr
    (20) expr -> . FLOAT
    (21) expr -> . STRING
    (22) expr -> . NUMBER
    (23) expr -> . NAME
    (24) expr -> . - expr
    (25) expr -> . NUM_INPUT
    (26) expr -> . RAW_INPUT
    (27) expr -> . expr > expr
    (28) expr -> . expr < expr
    (29) expr -> . NOT expr
    (30) expr -> . expr AND expr
    (31) expr -> . expr OR expr
    (32) expr -> . expr EQ_GREATER expr
    (33) expr -> . expr EQ_LESS expr
    (34) expr -> . expr NOT_EQEQ expr
    (35) expr -> . expr / expr
    (36) expr -> . expr * expr
    (37) expr -> . expr - expr
    (38) expr -> . expr ADD expr
    (39) expr -> . expr . expr
    RANDOMRANGE     shift and go to state 17
    PRINT           shift and go to state 18
    FLOAT           shift and go to state 19
    STRING          shift and go to state 16
    NUMBER          shift and go to state 20
    NAME            shift and go to state 32
    -               shift and go to state 21
    NUM_INPUT       shift and go to state 22
    RAW_INPUT       shift and go to state 23
    NOT             shift and go to state 24

    expr                           shift and go to state 83

state 46

    (37) expr -> expr - . expr
    (17) expr -> . RANDOMRANGE FROM expr TO expr
    (18) expr -> . PRINT TIME
    (19) expr -> . PRINT expr
    (20) expr -> . FLOAT
    (21) expr -> . STRING
    (22) expr -> . NUMBER
    (23) expr -> . NAME
    (24) expr -> . - expr
    (25) expr -> . NUM_INPUT
    (26) expr -> . RAW_INPUT
    (27) expr -> . expr > expr
    (28) expr -> . expr < expr
    (29) expr -> . NOT expr
    (30) expr -> . expr AND expr
    (31) expr -> . expr OR expr
    (32) expr -> . expr EQ_GREATER expr
    (33) expr -> . expr EQ_LESS expr
    (34) expr -> . expr NOT_EQEQ expr
    (35) expr -> . expr / expr
    (36) expr -> . expr * expr
    (37) expr -> . expr - expr
    (38) expr -> . expr ADD expr
    (39) expr -> . expr . expr
    RANDOMRANGE     shift and go to state 17
    PRINT           shift and go to state 18
    FLOAT           shift and go to state 19
    STRING          shift and go to state 16
    NUMBER          shift and go to state 20
    NAME            shift and go to state 32
    -               shift and go to state 21
    NUM_INPUT       shift and go to state 22
    RAW_INPUT       shift and go to state 23
    NOT             shift and go to state 24

    expr                           shift and go to state 84

state 47

    (38) expr -> expr ADD . expr
    (17) expr -> . RANDOMRANGE FROM expr TO expr
    (18) expr -> . PRINT TIME
    (19) expr -> . PRINT expr
    (20) expr -> . FLOAT
    (21) expr -> . STRING
    (22) expr -> . NUMBER
    (23) expr -> . NAME
    (24) expr -> . - expr
    (25) expr -> . NUM_INPUT
    (26) expr -> . RAW_INPUT
    (27) expr -> . expr > expr
    (28) expr -> . expr < expr
    (29) expr -> . NOT expr
    (30) expr -> . expr AND expr
    (31) expr -> . expr OR expr
    (32) expr -> . expr EQ_GREATER expr
    (33) expr -> . expr EQ_LESS expr
    (34) expr -> . expr NOT_EQEQ expr
    (35) expr -> . expr / expr
    (36) expr -> . expr * expr
    (37) expr -> . expr - expr
    (38) expr -> . expr ADD expr
    (39) expr -> . expr . expr
    RANDOMRANGE     shift and go to state 17
    PRINT           shift and go to state 18
    FLOAT           shift and go to state 19
    STRING          shift and go to state 16
    NUMBER          shift and go to state 20
    NAME            shift and go to state 32
    -               shift and go to state 21
    NUM_INPUT       shift and go to state 22
    RAW_INPUT       shift and go to state 23
    NOT             shift and go to state 24

    expr                           shift and go to state 85

state 48

    (39) expr -> expr . . expr
    (17) expr -> . RANDOMRANGE FROM expr TO expr
    (18) expr -> . PRINT TIME
    (19) expr -> . PRINT expr
    (20) expr -> . FLOAT
    (21) expr -> . STRING
    (22) expr -> . NUMBER
    (23) expr -> . NAME
    (24) expr -> . - expr
    (25) expr -> . NUM_INPUT
    (26) expr -> . RAW_INPUT
    (27) expr -> . expr > expr
    (28) expr -> . expr < expr
    (29) expr -> . NOT expr
    (30) expr -> . expr AND expr
    (31) expr -> . expr OR expr
    (32) expr -> . expr EQ_GREATER expr
    (33) expr -> . expr EQ_LESS expr
    (34) expr -> . expr NOT_EQEQ expr
    (35) expr -> . expr / expr
    (36) expr -> . expr * expr
    (37) expr -> . expr - expr
    (38) expr -> . expr ADD expr
    (39) expr -> . expr . expr
    RANDOMRANGE     shift and go to state 17
    PRINT           shift and go to state 18
    FLOAT           shift and go to state 19
    STRING          shift and go to state 16
    NUMBER          shift and go to state 20
    NAME            shift and go to state 32
    -               shift and go to state 21
    NUM_INPUT       shift and go to state 22
    RAW_INPUT       shift and go to state 23
    NOT             shift and go to state 24

    expr                           shift and go to state 86

state 49

    (50) array -> array [ . expr ]
    (17) expr -> . RANDOMRANGE FROM expr TO expr
    (18) expr -> . PRINT TIME
    (19) expr -> . PRINT expr
    (20) expr -> . FLOAT
    (21) expr -> . STRING
    (22) expr -> . NUMBER
    (23) expr -> . NAME
    (24) expr -> . - expr
    (25) expr -> . NUM_INPUT
    (26) expr -> . RAW_INPUT
    (27) expr -> . expr > expr
    (28) expr -> . expr < expr
    (29) expr -> . NOT expr
    (30) expr -> . expr AND expr
    (31) expr -> . expr OR expr
    (32) expr -> . expr EQ_GREATER expr
    (33) expr -> . expr EQ_LESS expr
    (34) expr -> . expr NOT_EQEQ expr
    (35) expr -> . expr / expr
    (36) expr -> . expr * expr
    (37) expr -> . expr - expr
    (38) expr -> . expr ADD expr
    (39) expr -> . expr . expr
    RANDOMRANGE     shift and go to state 17
    PRINT           shift and go to state 18
    FLOAT           shift and go to state 19
    STRING          shift and go to state 16
    NUMBER          shift and go to state 20
    NAME            shift and go to state 32
    -               shift and go to state 21
    NUM_INPUT       shift and go to state 22
    RAW_INPUT       shift and go to state 23
    NOT             shift and go to state 24

    expr                           shift and go to state 87

state 50

    (51) array -> array + . STRING
    (52) array -> array + . expr
    (53) array -> array + . array
    (17) expr -> . RANDOMRANGE FROM expr TO expr
    (18) expr -> . PRINT TIME
    (19) expr -> . PRINT expr
    (20) expr -> . FLOAT
    (21) expr -> . STRING
    (22) expr -> . NUMBER
    (23) expr -> . NAME
    (24) expr -> . - expr
    (25) expr -> . NUM_INPUT
    (26) expr -> . RAW_INPUT
    (27) expr -> . expr > expr
    (28) expr -> . expr < expr
    (29) expr -> . NOT expr
    (30) expr -> . expr AND expr
    (31) expr -> . expr OR expr
    (32) expr -> . expr EQ_GREATER expr
    (33) expr -> . expr EQ_LESS expr
    (34) expr -> . expr NOT_EQEQ expr
    (35) expr -> . expr / expr
    (36) expr -> . expr * expr
    (37) expr -> . expr - expr
    (38) expr -> . expr ADD expr
    (39) expr -> . expr . expr
    (50) array -> . array [ expr ]
    (51) array -> . array + STRING
    (52) array -> . array + expr
    (53) array -> . array + array
    (54) array -> . NAME
    (55) array -> . [ elements ]
    STRING          shift and go to state 89
    RANDOMRANGE     shift and go to state 17
    PRINT           shift and go to state 18
    FLOAT           shift and go to state 19
    NUMBER          shift and go to state 20
    NAME            shift and go to state 91
    -               shift and go to state 21
    NUM_INPUT       shift and go to state 22
    RAW_INPUT       shift and go to state 23
    NOT             shift and go to state 24
    [               shift and go to state 15

    array                          shift and go to state 88
    expr                           shift and go to state 90

state 51

    (43) var_assign -> RETURN NAME .
    $end            reduce using rule 43 (var_assign -> RETURN NAME .)
    WHILE           reduce using rule 43 (var_assign -> RETURN NAME .)
    ,               reduce using rule 43 (var_assign -> RETURN NAME .)
    ]               reduce using rule 43 (var_assign -> RETURN NAME .)
    ELIF            reduce using rule 43 (var_assign -> RETURN NAME .)
    ELSE            reduce using rule 43 (var_assign -> RETURN NAME .)


state 52

    (55) array -> [ elements . ]
    ]               shift and go to state 92


state 53

    (56) elements -> statement . , elements
    (57) elements -> statement .
    ,               shift and go to state 93
    ]               reduce using rule 57 (elements -> statement .)


state 54

    (17) expr -> RANDOMRANGE FROM . expr TO expr
    (17) expr -> . RANDOMRANGE FROM expr TO expr
    (18) expr -> . PRINT TIME
    (19) expr -> . PRINT expr
    (20) expr -> . FLOAT
    (21) expr -> . STRING
    (22) expr -> . NUMBER
    (23) expr -> . NAME
    (24) expr -> . - expr
    (25) expr -> . NUM_INPUT
    (26) expr -> . RAW_INPUT
    (27) expr -> . expr > expr
    (28) expr -> . expr < expr
    (29) expr -> . NOT expr
    (30) expr -> . expr AND expr
    (31) expr -> . expr OR expr
    (32) expr -> . expr EQ_GREATER expr
    (33) expr -> . expr EQ_LESS expr
    (34) expr -> . expr NOT_EQEQ expr
    (35) expr -> . expr / expr
    (36) expr -> . expr * expr
    (37) expr -> . expr - expr
    (38) expr -> . expr ADD expr
    (39) expr -> . expr . expr
    RANDOMRANGE     shift and go to state 17
    PRINT           shift and go to state 18
    FLOAT           shift and go to state 19
    STRING          shift and go to state 16
    NUMBER          shift and go to state 20
    NAME            shift and go to state 32
    -               shift and go to state 21
    NUM_INPUT       shift and go to state 22
    RAW_INPUT       shift and go to state 23
    NOT             shift and go to state 24

    expr                           shift and go to state 94

state 55

    (18) expr -> PRINT TIME .
    >               reduce using rule 18 (expr -> PRINT TIME .)
    <               reduce using rule 18 (expr -> PRINT TIME .)
    AND             reduce using rule 18 (expr -> PRINT TIME .)
    OR              reduce using rule 18 (expr -> PRINT TIME .)
    EQ_GREATER      reduce using rule 18 (expr -> PRINT TIME .)
    EQ_LESS         reduce using rule 18 (expr -> PRINT TIME .)
    NOT_EQEQ        reduce using rule 18 (expr -> PRINT TIME .)
    /               reduce using rule 18 (expr -> PRINT TIME .)
    *               reduce using rule 18 (expr -> PRINT TIME .)
    -               reduce using rule 18 (expr -> PRINT TIME .)
    ADD             reduce using rule 18 (expr -> PRINT TIME .)
    .               reduce using rule 18 (expr -> PRINT TIME .)
    $end            reduce using rule 18 (expr -> PRINT TIME .)
    WHILE           reduce using rule 18 (expr -> PRINT TIME .)
    SHOMARANDE      reduce using rule 18 (expr -> PRINT TIME .)
    EQEQ            reduce using rule 18 (expr -> PRINT TIME .)
    ,               reduce using rule 18 (expr -> PRINT TIME .)
    ]               reduce using rule 18 (expr -> PRINT TIME .)
    ELIF            reduce using rule 18 (expr -> PRINT TIME .)
    ELSE            reduce using rule 18 (expr -> PRINT TIME .)
    [               reduce using rule 18 (expr -> PRINT TIME .)
    +               reduce using rule 18 (expr -> PRINT TIME .)
    TO              reduce using rule 18 (expr -> PRINT TIME .)
    TYPE            reduce using rule 18 (expr -> PRINT TIME .)
    DO              reduce using rule 18 (expr -> PRINT TIME .)
    TIME            reduce using rule 18 (expr -> PRINT TIME .)
    NAME            reduce using rule 18 (expr -> PRINT TIME .)
    CLASS           reduce using rule 18 (expr -> PRINT TIME .)
    FUNCTION        reduce using rule 18 (expr -> PRINT TIME .)
    IF              reduce using rule 18 (expr -> PRINT TIME .)
    FOR             reduce using rule 18 (expr -> PRINT TIME .)
    RETURN          reduce using rule 18 (expr -> PRINT TIME .)
    RANDOMRANGE     reduce using rule 18 (expr -> PRINT TIME .)
    PRINT           reduce using rule 18 (expr -> PRINT TIME .)
    FLOAT           reduce using rule 18 (expr -> PRINT TIME .)
    STRING          reduce using rule 18 (expr -> PRINT TIME .)
    NUMBER          reduce using rule 18 (expr -> PRINT TIME .)
    NUM_INPUT       reduce using rule 18 (expr -> PRINT TIME .)
    RAW_INPUT       reduce using rule 18 (expr -> PRINT TIME .)
    NOT             reduce using rule 18 (expr -> PRINT TIME .)
    THEN            reduce using rule 18 (expr -> PRINT TIME .)


state 56

    (19) expr -> PRINT expr .
    (27) expr -> expr . > expr
    (28) expr -> expr . < expr
    (30) expr -> expr . AND expr
    (31) expr -> expr . OR expr
    (32) expr -> expr . EQ_GREATER expr
    (33) expr -> expr . EQ_LESS expr
    (34) expr -> expr . NOT_EQEQ expr
    (35) expr -> expr . / expr
    (36) expr -> expr . * expr
    (37) expr -> expr . - expr
    (38) expr -> expr . ADD expr
    (39) expr -> expr . . expr
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ_GREATER resolved as shift
  ! shift/reduce conflict for EQ_LESS resolved as shift
  ! shift/reduce conflict for NOT_EQEQ resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for . resolved as shift
    $end            reduce using rule 19 (expr -> PRINT expr .)
    WHILE           reduce using rule 19 (expr -> PRINT expr .)
    SHOMARANDE      reduce using rule 19 (expr -> PRINT expr .)
    EQEQ            reduce using rule 19 (expr -> PRINT expr .)
    ,               reduce using rule 19 (expr -> PRINT expr .)
    ]               reduce using rule 19 (expr -> PRINT expr .)
    ELIF            reduce using rule 19 (expr -> PRINT expr .)
    ELSE            reduce using rule 19 (expr -> PRINT expr .)
    [               reduce using rule 19 (expr -> PRINT expr .)
    +               reduce using rule 19 (expr -> PRINT expr .)
    TO              reduce using rule 19 (expr -> PRINT expr .)
    TYPE            reduce using rule 19 (expr -> PRINT expr .)
    DO              reduce using rule 19 (expr -> PRINT expr .)
    TIME            reduce using rule 19 (expr -> PRINT expr .)
    NAME            reduce using rule 19 (expr -> PRINT expr .)
    CLASS           reduce using rule 19 (expr -> PRINT expr .)
    FUNCTION        reduce using rule 19 (expr -> PRINT expr .)
    IF              reduce using rule 19 (expr -> PRINT expr .)
    FOR             reduce using rule 19 (expr -> PRINT expr .)
    RETURN          reduce using rule 19 (expr -> PRINT expr .)
    RANDOMRANGE     reduce using rule 19 (expr -> PRINT expr .)
    PRINT           reduce using rule 19 (expr -> PRINT expr .)
    FLOAT           reduce using rule 19 (expr -> PRINT expr .)
    STRING          reduce using rule 19 (expr -> PRINT expr .)
    NUMBER          reduce using rule 19 (expr -> PRINT expr .)
    NUM_INPUT       reduce using rule 19 (expr -> PRINT expr .)
    RAW_INPUT       reduce using rule 19 (expr -> PRINT expr .)
    NOT             reduce using rule 19 (expr -> PRINT expr .)
    THEN            reduce using rule 19 (expr -> PRINT expr .)
    >               shift and go to state 37
    <               shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40
    EQ_GREATER      shift and go to state 41
    EQ_LESS         shift and go to state 42
    NOT_EQEQ        shift and go to state 43
    /               shift and go to state 44
    *               shift and go to state 45
    -               shift and go to state 46
    ADD             shift and go to state 47
    .               shift and go to state 48


state 57

    (24) expr -> - expr .
    (27) expr -> expr . > expr
    (28) expr -> expr . < expr
    (30) expr -> expr . AND expr
    (31) expr -> expr . OR expr
    (32) expr -> expr . EQ_GREATER expr
    (33) expr -> expr . EQ_LESS expr
    (34) expr -> expr . NOT_EQEQ expr
    (35) expr -> expr . / expr
    (36) expr -> expr . * expr
    (37) expr -> expr . - expr
    (38) expr -> expr . ADD expr
    (39) expr -> expr . . expr
    >               reduce using rule 24 (expr -> - expr .)
    <               reduce using rule 24 (expr -> - expr .)
    AND             reduce using rule 24 (expr -> - expr .)
    OR              reduce using rule 24 (expr -> - expr .)
    EQ_GREATER      reduce using rule 24 (expr -> - expr .)
    EQ_LESS         reduce using rule 24 (expr -> - expr .)
    NOT_EQEQ        reduce using rule 24 (expr -> - expr .)
    /               reduce using rule 24 (expr -> - expr .)
    *               reduce using rule 24 (expr -> - expr .)
    -               reduce using rule 24 (expr -> - expr .)
    ADD             reduce using rule 24 (expr -> - expr .)
    .               reduce using rule 24 (expr -> - expr .)
    $end            reduce using rule 24 (expr -> - expr .)
    WHILE           reduce using rule 24 (expr -> - expr .)
    SHOMARANDE      reduce using rule 24 (expr -> - expr .)
    EQEQ            reduce using rule 24 (expr -> - expr .)
    ,               reduce using rule 24 (expr -> - expr .)
    ]               reduce using rule 24 (expr -> - expr .)
    ELIF            reduce using rule 24 (expr -> - expr .)
    ELSE            reduce using rule 24 (expr -> - expr .)
    [               reduce using rule 24 (expr -> - expr .)
    +               reduce using rule 24 (expr -> - expr .)
    TO              reduce using rule 24 (expr -> - expr .)
    TYPE            reduce using rule 24 (expr -> - expr .)
    DO              reduce using rule 24 (expr -> - expr .)
    TIME            reduce using rule 24 (expr -> - expr .)
    NAME            reduce using rule 24 (expr -> - expr .)
    CLASS           reduce using rule 24 (expr -> - expr .)
    FUNCTION        reduce using rule 24 (expr -> - expr .)
    IF              reduce using rule 24 (expr -> - expr .)
    FOR             reduce using rule 24 (expr -> - expr .)
    RETURN          reduce using rule 24 (expr -> - expr .)
    RANDOMRANGE     reduce using rule 24 (expr -> - expr .)
    PRINT           reduce using rule 24 (expr -> - expr .)
    FLOAT           reduce using rule 24 (expr -> - expr .)
    STRING          reduce using rule 24 (expr -> - expr .)
    NUMBER          reduce using rule 24 (expr -> - expr .)
    NUM_INPUT       reduce using rule 24 (expr -> - expr .)
    RAW_INPUT       reduce using rule 24 (expr -> - expr .)
    NOT             reduce using rule 24 (expr -> - expr .)
    THEN            reduce using rule 24 (expr -> - expr .)


state 58

    (29) expr -> NOT expr .
    (27) expr -> expr . > expr
    (28) expr -> expr . < expr
    (30) expr -> expr . AND expr
    (31) expr -> expr . OR expr
    (32) expr -> expr . EQ_GREATER expr
    (33) expr -> expr . EQ_LESS expr
    (34) expr -> expr . NOT_EQEQ expr
    (35) expr -> expr . / expr
    (36) expr -> expr . * expr
    (37) expr -> expr . - expr
    (38) expr -> expr . ADD expr
    (39) expr -> expr . . expr
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ_GREATER resolved as shift
  ! shift/reduce conflict for EQ_LESS resolved as shift
  ! shift/reduce conflict for NOT_EQEQ resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for . resolved as shift
    $end            reduce using rule 29 (expr -> NOT expr .)
    WHILE           reduce using rule 29 (expr -> NOT expr .)
    SHOMARANDE      reduce using rule 29 (expr -> NOT expr .)
    EQEQ            reduce using rule 29 (expr -> NOT expr .)
    ,               reduce using rule 29 (expr -> NOT expr .)
    ]               reduce using rule 29 (expr -> NOT expr .)
    ELIF            reduce using rule 29 (expr -> NOT expr .)
    ELSE            reduce using rule 29 (expr -> NOT expr .)
    [               reduce using rule 29 (expr -> NOT expr .)
    +               reduce using rule 29 (expr -> NOT expr .)
    TO              reduce using rule 29 (expr -> NOT expr .)
    TYPE            reduce using rule 29 (expr -> NOT expr .)
    DO              reduce using rule 29 (expr -> NOT expr .)
    TIME            reduce using rule 29 (expr -> NOT expr .)
    NAME            reduce using rule 29 (expr -> NOT expr .)
    CLASS           reduce using rule 29 (expr -> NOT expr .)
    FUNCTION        reduce using rule 29 (expr -> NOT expr .)
    IF              reduce using rule 29 (expr -> NOT expr .)
    FOR             reduce using rule 29 (expr -> NOT expr .)
    RETURN          reduce using rule 29 (expr -> NOT expr .)
    RANDOMRANGE     reduce using rule 29 (expr -> NOT expr .)
    PRINT           reduce using rule 29 (expr -> NOT expr .)
    FLOAT           reduce using rule 29 (expr -> NOT expr .)
    STRING          reduce using rule 29 (expr -> NOT expr .)
    NUMBER          reduce using rule 29 (expr -> NOT expr .)
    NUM_INPUT       reduce using rule 29 (expr -> NOT expr .)
    RAW_INPUT       reduce using rule 29 (expr -> NOT expr .)
    NOT             reduce using rule 29 (expr -> NOT expr .)
    THEN            reduce using rule 29 (expr -> NOT expr .)
    >               shift and go to state 37
    <               shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40
    EQ_GREATER      shift and go to state 41
    EQ_LESS         shift and go to state 42
    NOT_EQEQ        shift and go to state 43
    /               shift and go to state 44
    *               shift and go to state 45
    -               shift and go to state 46
    ADD             shift and go to state 47
    .               shift and go to state 48


state 59

    (4) statement -> NAME ( ) .
    $end            reduce using rule 4 (statement -> NAME ( ) .)
    WHILE           reduce using rule 4 (statement -> NAME ( ) .)
    ,               reduce using rule 4 (statement -> NAME ( ) .)
    ]               reduce using rule 4 (statement -> NAME ( ) .)
    ELIF            reduce using rule 4 (statement -> NAME ( ) .)
    ELSE            reduce using rule 4 (statement -> NAME ( ) .)


state 60

    (4) statement -> NAME . ( )
    (13) statement -> NAME . RUN
    (54) array -> NAME .
    (23) expr -> NAME .
    (42) var_assign -> NAME . = bool
    (44) var_assign -> NAME . = statement
    (45) var_assign -> NAME . = array
    (46) var_assign -> NAME . = expr
  ! reduce/reduce conflict for $end resolved using rule 23 (expr -> NAME .)
  ! reduce/reduce conflict for WHILE resolved using rule 23 (expr -> NAME .)
  ! reduce/reduce conflict for , resolved using rule 23 (expr -> NAME .)
  ! reduce/reduce conflict for ] resolved using rule 23 (expr -> NAME .)
  ! reduce/reduce conflict for ELIF resolved using rule 23 (expr -> NAME .)
  ! reduce/reduce conflict for ELSE resolved using rule 23 (expr -> NAME .)
    (               shift and go to state 26
    RUN             shift and go to state 27
    [               reduce using rule 54 (array -> NAME .)
    +               reduce using rule 54 (array -> NAME .)
    >               reduce using rule 23 (expr -> NAME .)
    <               reduce using rule 23 (expr -> NAME .)
    AND             reduce using rule 23 (expr -> NAME .)
    OR              reduce using rule 23 (expr -> NAME .)
    EQ_GREATER      reduce using rule 23 (expr -> NAME .)
    EQ_LESS         reduce using rule 23 (expr -> NAME .)
    NOT_EQEQ        reduce using rule 23 (expr -> NAME .)
    /               reduce using rule 23 (expr -> NAME .)
    *               reduce using rule 23 (expr -> NAME .)
    -               reduce using rule 23 (expr -> NAME .)
    ADD             reduce using rule 23 (expr -> NAME .)
    .               reduce using rule 23 (expr -> NAME .)
    $end            reduce using rule 23 (expr -> NAME .)
    WHILE           reduce using rule 23 (expr -> NAME .)
    ,               reduce using rule 23 (expr -> NAME .)
    ]               reduce using rule 23 (expr -> NAME .)
    ELIF            reduce using rule 23 (expr -> NAME .)
    ELSE            reduce using rule 23 (expr -> NAME .)
    =               shift and go to state 28


state 61

    (42) var_assign -> NAME = bool .
    (48) bool -> bool . ANDALSO bool
    $end            reduce using rule 42 (var_assign -> NAME = bool .)
    WHILE           reduce using rule 42 (var_assign -> NAME = bool .)
    ,               reduce using rule 42 (var_assign -> NAME = bool .)
    ]               reduce using rule 42 (var_assign -> NAME = bool .)
    ELIF            reduce using rule 42 (var_assign -> NAME = bool .)
    ELSE            reduce using rule 42 (var_assign -> NAME = bool .)
    ANDALSO         shift and go to state 95


state 62

    (44) var_assign -> NAME = statement .
    $end            reduce using rule 44 (var_assign -> NAME = statement .)
    WHILE           reduce using rule 44 (var_assign -> NAME = statement .)
    ,               reduce using rule 44 (var_assign -> NAME = statement .)
    ]               reduce using rule 44 (var_assign -> NAME = statement .)
    ELIF            reduce using rule 44 (var_assign -> NAME = statement .)
    ELSE            reduce using rule 44 (var_assign -> NAME = statement .)


state 63

    (45) var_assign -> NAME = array .
    (14) statement -> array .
    (50) array -> array . [ expr ]
    (51) array -> array . + STRING
    (52) array -> array . + expr
    (53) array -> array . + array
  ! reduce/reduce conflict for $end resolved using rule 14 (statement -> array .)
  ! reduce/reduce conflict for WHILE resolved using rule 14 (statement -> array .)
  ! reduce/reduce conflict for , resolved using rule 14 (statement -> array .)
  ! reduce/reduce conflict for ] resolved using rule 14 (statement -> array .)
  ! reduce/reduce conflict for ELIF resolved using rule 14 (statement -> array .)
  ! reduce/reduce conflict for ELSE resolved using rule 14 (statement -> array .)
    $end            reduce using rule 14 (statement -> array .)
    WHILE           reduce using rule 14 (statement -> array .)
    ,               reduce using rule 14 (statement -> array .)
    ]               reduce using rule 14 (statement -> array .)
    ELIF            reduce using rule 14 (statement -> array .)
    ELSE            reduce using rule 14 (statement -> array .)
    [               shift and go to state 49
    +               shift and go to state 50


state 64

    (46) var_assign -> NAME = expr .
    (15) statement -> expr .
    (27) expr -> expr . > expr
    (28) expr -> expr . < expr
    (30) expr -> expr . AND expr
    (31) expr -> expr . OR expr
    (32) expr -> expr . EQ_GREATER expr
    (33) expr -> expr . EQ_LESS expr
    (34) expr -> expr . NOT_EQEQ expr
    (35) expr -> expr . / expr
    (36) expr -> expr . * expr
    (37) expr -> expr . - expr
    (38) expr -> expr . ADD expr
    (39) expr -> expr . . expr
  ! reduce/reduce conflict for $end resolved using rule 15 (statement -> expr .)
  ! reduce/reduce conflict for WHILE resolved using rule 15 (statement -> expr .)
  ! reduce/reduce conflict for , resolved using rule 15 (statement -> expr .)
  ! reduce/reduce conflict for ] resolved using rule 15 (statement -> expr .)
  ! reduce/reduce conflict for ELIF resolved using rule 15 (statement -> expr .)
  ! reduce/reduce conflict for ELSE resolved using rule 15 (statement -> expr .)
    $end            reduce using rule 15 (statement -> expr .)
    WHILE           reduce using rule 15 (statement -> expr .)
    ,               reduce using rule 15 (statement -> expr .)
    ]               reduce using rule 15 (statement -> expr .)
    ELIF            reduce using rule 15 (statement -> expr .)
    ELSE            reduce using rule 15 (statement -> expr .)
    >               shift and go to state 37
    <               shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40
    EQ_GREATER      shift and go to state 41
    EQ_LESS         shift and go to state 42
    NOT_EQEQ        shift and go to state 43
    /               shift and go to state 44
    *               shift and go to state 45
    -               shift and go to state 46
    ADD             shift and go to state 47
    .               shift and go to state 48


state 65

    (47) bool -> NOT . bool
    (29) expr -> NOT . expr
    (47) bool -> . NOT bool
    (48) bool -> . bool ANDALSO bool
    (49) bool -> . BOOLEAN
    (17) expr -> . RANDOMRANGE FROM expr TO expr
    (18) expr -> . PRINT TIME
    (19) expr -> . PRINT expr
    (20) expr -> . FLOAT
    (21) expr -> . STRING
    (22) expr -> . NUMBER
    (23) expr -> . NAME
    (24) expr -> . - expr
    (25) expr -> . NUM_INPUT
    (26) expr -> . RAW_INPUT
    (27) expr -> . expr > expr
    (28) expr -> . expr < expr
    (29) expr -> . NOT expr
    (30) expr -> . expr AND expr
    (31) expr -> . expr OR expr
    (32) expr -> . expr EQ_GREATER expr
    (33) expr -> . expr EQ_LESS expr
    (34) expr -> . expr NOT_EQEQ expr
    (35) expr -> . expr / expr
    (36) expr -> . expr * expr
    (37) expr -> . expr - expr
    (38) expr -> . expr ADD expr
    (39) expr -> . expr . expr
    NOT             shift and go to state 65
    BOOLEAN         shift and go to state 66
    RANDOMRANGE     shift and go to state 17
    PRINT           shift and go to state 18
    FLOAT           shift and go to state 19
    STRING          shift and go to state 16
    NUMBER          shift and go to state 20
    NAME            shift and go to state 32
    -               shift and go to state 21
    NUM_INPUT       shift and go to state 22
    RAW_INPUT       shift and go to state 23

    bool                           shift and go to state 96
    expr                           shift and go to state 58

state 66

    (49) bool -> BOOLEAN .
    ANDALSO         reduce using rule 49 (bool -> BOOLEAN .)
    $end            reduce using rule 49 (bool -> BOOLEAN .)
    WHILE           reduce using rule 49 (bool -> BOOLEAN .)
    ,               reduce using rule 49 (bool -> BOOLEAN .)
    ]               reduce using rule 49 (bool -> BOOLEAN .)
    ELIF            reduce using rule 49 (bool -> BOOLEAN .)
    ELSE            reduce using rule 49 (bool -> BOOLEAN .)


state 67

    (2) statement -> DO statement WHILE . condition
    (40) condition -> . expr SHOMARANDE expr
    (41) condition -> . expr EQEQ expr
    (17) expr -> . RANDOMRANGE FROM expr TO expr
    (18) expr -> . PRINT TIME
    (19) expr -> . PRINT expr
    (20) expr -> . FLOAT
    (21) expr -> . STRING
    (22) expr -> . NUMBER
    (23) expr -> . NAME
    (24) expr -> . - expr
    (25) expr -> . NUM_INPUT
    (26) expr -> . RAW_INPUT
    (27) expr -> . expr > expr
    (28) expr -> . expr < expr
    (29) expr -> . NOT expr
    (30) expr -> . expr AND expr
    (31) expr -> . expr OR expr
    (32) expr -> . expr EQ_GREATER expr
    (33) expr -> . expr EQ_LESS expr
    (34) expr -> . expr NOT_EQEQ expr
    (35) expr -> . expr / expr
    (36) expr -> . expr * expr
    (37) expr -> . expr - expr
    (38) expr -> . expr ADD expr
    (39) expr -> . expr . expr
    RANDOMRANGE     shift and go to state 17
    PRINT           shift and go to state 18
    FLOAT           shift and go to state 19
    STRING          shift and go to state 16
    NUMBER          shift and go to state 20
    NAME            shift and go to state 32
    -               shift and go to state 21
    NUM_INPUT       shift and go to state 22
    RAW_INPUT       shift and go to state 23
    NOT             shift and go to state 24

    condition                      shift and go to state 97
    expr                           shift and go to state 31

state 68

    (11) statement -> WHILE condition statement .
    $end            reduce using rule 11 (statement -> WHILE condition statement .)
    WHILE           reduce using rule 11 (statement -> WHILE condition statement .)
    ,               reduce using rule 11 (statement -> WHILE condition statement .)
    ]               reduce using rule 11 (statement -> WHILE condition statement .)
    ELIF            reduce using rule 11 (statement -> WHILE condition statement .)
    ELSE            reduce using rule 11 (statement -> WHILE condition statement .)


state 69

    (40) condition -> expr SHOMARANDE . expr
    (17) expr -> . RANDOMRANGE FROM expr TO expr
    (18) expr -> . PRINT TIME
    (19) expr -> . PRINT expr
    (20) expr -> . FLOAT
    (21) expr -> . STRING
    (22) expr -> . NUMBER
    (23) expr -> . NAME
    (24) expr -> . - expr
    (25) expr -> . NUM_INPUT
    (26) expr -> . RAW_INPUT
    (27) expr -> . expr > expr
    (28) expr -> . expr < expr
    (29) expr -> . NOT expr
    (30) expr -> . expr AND expr
    (31) expr -> . expr OR expr
    (32) expr -> . expr EQ_GREATER expr
    (33) expr -> . expr EQ_LESS expr
    (34) expr -> . expr NOT_EQEQ expr
    (35) expr -> . expr / expr
    (36) expr -> . expr * expr
    (37) expr -> . expr - expr
    (38) expr -> . expr ADD expr
    (39) expr -> . expr . expr
    RANDOMRANGE     shift and go to state 17
    PRINT           shift and go to state 18
    FLOAT           shift and go to state 19
    STRING          shift and go to state 16
    NUMBER          shift and go to state 20
    NAME            shift and go to state 32
    -               shift and go to state 21
    NUM_INPUT       shift and go to state 22
    RAW_INPUT       shift and go to state 23
    NOT             shift and go to state 24

    expr                           shift and go to state 98

state 70

    (41) condition -> expr EQEQ . expr
    (17) expr -> . RANDOMRANGE FROM expr TO expr
    (18) expr -> . PRINT TIME
    (19) expr -> . PRINT expr
    (20) expr -> . FLOAT
    (21) expr -> . STRING
    (22) expr -> . NUMBER
    (23) expr -> . NAME
    (24) expr -> . - expr
    (25) expr -> . NUM_INPUT
    (26) expr -> . RAW_INPUT
    (27) expr -> . expr > expr
    (28) expr -> . expr < expr
    (29) expr -> . NOT expr
    (30) expr -> . expr AND expr
    (31) expr -> . expr OR expr
    (32) expr -> . expr EQ_GREATER expr
    (33) expr -> . expr EQ_LESS expr
    (34) expr -> . expr NOT_EQEQ expr
    (35) expr -> . expr / expr
    (36) expr -> . expr * expr
    (37) expr -> . expr - expr
    (38) expr -> . expr ADD expr
    (39) expr -> . expr . expr
    RANDOMRANGE     shift and go to state 17
    PRINT           shift and go to state 18
    FLOAT           shift and go to state 19
    STRING          shift and go to state 16
    NUMBER          shift and go to state 20
    NAME            shift and go to state 32
    -               shift and go to state 21
    NUM_INPUT       shift and go to state 22
    RAW_INPUT       shift and go to state 23
    NOT             shift and go to state 24

    expr                           shift and go to state 99

state 71

    (5) statement -> CLASS NAME : . statement
    (1) statement -> . TYPE NAME
    (2) statement -> . DO statement WHILE condition
    (3) statement -> . TIME
    (4) statement -> . NAME ( )
    (5) statement -> . CLASS NAME : statement
    (6) statement -> . FUNCTION NAME statement
    (7) statement -> . IF condition THEN statement ELIF condition THEN statement ELSE statement
    (8) statement -> . IF condition THEN statement
    (9) statement -> . IF condition THEN statement ELSE statement
    (10) statement -> . FOR NAME FROM expr TO expr DO statement
    (11) statement -> . WHILE condition statement
    (12) statement -> . var_assign
    (13) statement -> . NAME RUN
    (14) statement -> . array
    (15) statement -> . expr
    (16) statement -> .
    (42) var_assign -> . NAME = bool
    (43) var_assign -> . RETURN NAME
    (44) var_assign -> . NAME = statement
    (45) var_assign -> . NAME = array
    (46) var_assign -> . NAME = expr
    (50) array -> . array [ expr ]
    (51) array -> . array + STRING
    (52) array -> . array + expr
    (53) array -> . array + array
    (54) array -> . NAME
    (55) array -> . [ elements ]
    (17) expr -> . RANDOMRANGE FROM expr TO expr
    (18) expr -> . PRINT TIME
    (19) expr -> . PRINT expr
    (20) expr -> . FLOAT
    (21) expr -> . STRING
    (22) expr -> . NUMBER
    (23) expr -> . NAME
    (24) expr -> . - expr
    (25) expr -> . NUM_INPUT
    (26) expr -> . RAW_INPUT
    (27) expr -> . expr > expr
    (28) expr -> . expr < expr
    (29) expr -> . NOT expr
    (30) expr -> . expr AND expr
    (31) expr -> . expr OR expr
    (32) expr -> . expr EQ_GREATER expr
    (33) expr -> . expr EQ_LESS expr
    (34) expr -> . expr NOT_EQEQ expr
    (35) expr -> . expr / expr
    (36) expr -> . expr * expr
    (37) expr -> . expr - expr
    (38) expr -> . expr ADD expr
    (39) expr -> . expr . expr
  ! shift/reduce conflict for WHILE resolved as shift
    TYPE            shift and go to state 2
    DO              shift and go to state 4
    TIME            shift and go to state 6
    NAME            shift and go to state 3
    CLASS           shift and go to state 7
    FUNCTION        shift and go to state 8
    IF              shift and go to state 9
    FOR             shift and go to state 10
    WHILE           shift and go to state 5
    $end            reduce using rule 16 (statement -> .)
    ,               reduce using rule 16 (statement -> .)
    ]               reduce using rule 16 (statement -> .)
    ELIF            reduce using rule 16 (statement -> .)
    ELSE            reduce using rule 16 (statement -> .)
    RETURN          shift and go to state 14
    [               shift and go to state 15
    RANDOMRANGE     shift and go to state 17
    PRINT           shift and go to state 18
    FLOAT           shift and go to state 19
    STRING          shift and go to state 16
    NUMBER          shift and go to state 20
    -               shift and go to state 21
    NUM_INPUT       shift and go to state 22
    RAW_INPUT       shift and go to state 23
    NOT             shift and go to state 24

    statement                      shift and go to state 100
    expr                           shift and go to state 11
    var_assign                     shift and go to state 12
    array                          shift and go to state 13

state 72

    (6) statement -> FUNCTION NAME statement .
    $end            reduce using rule 6 (statement -> FUNCTION NAME statement .)
    WHILE           reduce using rule 6 (statement -> FUNCTION NAME statement .)
    ,               reduce using rule 6 (statement -> FUNCTION NAME statement .)
    ]               reduce using rule 6 (statement -> FUNCTION NAME statement .)
    ELIF            reduce using rule 6 (statement -> FUNCTION NAME statement .)
    ELSE            reduce using rule 6 (statement -> FUNCTION NAME statement .)


state 73

    (7) statement -> IF condition THEN . statement ELIF condition THEN statement ELSE statement
    (8) statement -> IF condition THEN . statement
    (9) statement -> IF condition THEN . statement ELSE statement
    (1) statement -> . TYPE NAME
    (2) statement -> . DO statement WHILE condition
    (3) statement -> . TIME
    (4) statement -> . NAME ( )
    (5) statement -> . CLASS NAME : statement
    (6) statement -> . FUNCTION NAME statement
    (7) statement -> . IF condition THEN statement ELIF condition THEN statement ELSE statement
    (8) statement -> . IF condition THEN statement
    (9) statement -> . IF condition THEN statement ELSE statement
    (10) statement -> . FOR NAME FROM expr TO expr DO statement
    (11) statement -> . WHILE condition statement
    (12) statement -> . var_assign
    (13) statement -> . NAME RUN
    (14) statement -> . array
    (15) statement -> . expr
    (16) statement -> .
    (42) var_assign -> . NAME = bool
    (43) var_assign -> . RETURN NAME
    (44) var_assign -> . NAME = statement
    (45) var_assign -> . NAME = array
    (46) var_assign -> . NAME = expr
    (50) array -> . array [ expr ]
    (51) array -> . array + STRING
    (52) array -> . array + expr
    (53) array -> . array + array
    (54) array -> . NAME
    (55) array -> . [ elements ]
    (17) expr -> . RANDOMRANGE FROM expr TO expr
    (18) expr -> . PRINT TIME
    (19) expr -> . PRINT expr
    (20) expr -> . FLOAT
    (21) expr -> . STRING
    (22) expr -> . NUMBER
    (23) expr -> . NAME
    (24) expr -> . - expr
    (25) expr -> . NUM_INPUT
    (26) expr -> . RAW_INPUT
    (27) expr -> . expr > expr
    (28) expr -> . expr < expr
    (29) expr -> . NOT expr
    (30) expr -> . expr AND expr
    (31) expr -> . expr OR expr
    (32) expr -> . expr EQ_GREATER expr
    (33) expr -> . expr EQ_LESS expr
    (34) expr -> . expr NOT_EQEQ expr
    (35) expr -> . expr / expr
    (36) expr -> . expr * expr
    (37) expr -> . expr - expr
    (38) expr -> . expr ADD expr
    (39) expr -> . expr . expr
  ! shift/reduce conflict for WHILE resolved as shift
    TYPE            shift and go to state 2
    DO              shift and go to state 4
    TIME            shift and go to state 6
    NAME            shift and go to state 3
    CLASS           shift and go to state 7
    FUNCTION        shift and go to state 8
    IF              shift and go to state 9
    FOR             shift and go to state 10
    WHILE           shift and go to state 5
    $end            reduce using rule 16 (statement -> .)
    ,               reduce using rule 16 (statement -> .)
    ]               reduce using rule 16 (statement -> .)
    ELIF            reduce using rule 16 (statement -> .)
    ELSE            reduce using rule 16 (statement -> .)
    RETURN          shift and go to state 14
    [               shift and go to state 15
    RANDOMRANGE     shift and go to state 17
    PRINT           shift and go to state 18
    FLOAT           shift and go to state 19
    STRING          shift and go to state 16
    NUMBER          shift and go to state 20
    -               shift and go to state 21
    NUM_INPUT       shift and go to state 22
    RAW_INPUT       shift and go to state 23
    NOT             shift and go to state 24

    statement                      shift and go to state 101
    expr                           shift and go to state 11
    var_assign                     shift and go to state 12
    array                          shift and go to state 13

state 74

    (10) statement -> FOR NAME FROM . expr TO expr DO statement
    (17) expr -> . RANDOMRANGE FROM expr TO expr
    (18) expr -> . PRINT TIME
    (19) expr -> . PRINT expr
    (20) expr -> . FLOAT
    (21) expr -> . STRING
    (22) expr -> . NUMBER
    (23) expr -> . NAME
    (24) expr -> . - expr
    (25) expr -> . NUM_INPUT
    (26) expr -> . RAW_INPUT
    (27) expr -> . expr > expr
    (28) expr -> . expr < expr
    (29) expr -> . NOT expr
    (30) expr -> . expr AND expr
    (31) expr -> . expr OR expr
    (32) expr -> . expr EQ_GREATER expr
    (33) expr -> . expr EQ_LESS expr
    (34) expr -> . expr NOT_EQEQ expr
    (35) expr -> . expr / expr
    (36) expr -> . expr * expr
    (37) expr -> . expr - expr
    (38) expr -> . expr ADD expr
    (39) expr -> . expr . expr
    RANDOMRANGE     shift and go to state 17
    PRINT           shift and go to state 18
    FLOAT           shift and go to state 19
    STRING          shift and go to state 16
    NUMBER          shift and go to state 20
    NAME            shift and go to state 32
    -               shift and go to state 21
    NUM_INPUT       shift and go to state 22
    RAW_INPUT       shift and go to state 23
    NOT             shift and go to state 24

    expr                           shift and go to state 102

state 75

    (27) expr -> expr > expr .
    (27) expr -> expr . > expr
    (28) expr -> expr . < expr
    (30) expr -> expr . AND expr
    (31) expr -> expr . OR expr
    (32) expr -> expr . EQ_GREATER expr
    (33) expr -> expr . EQ_LESS expr
    (34) expr -> expr . NOT_EQEQ expr
    (35) expr -> expr . / expr
    (36) expr -> expr . * expr
    (37) expr -> expr . - expr
    (38) expr -> expr . ADD expr
    (39) expr -> expr . . expr
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ_GREATER resolved as shift
  ! shift/reduce conflict for EQ_LESS resolved as shift
  ! shift/reduce conflict for NOT_EQEQ resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for . resolved as shift
    $end            reduce using rule 27 (expr -> expr > expr .)
    WHILE           reduce using rule 27 (expr -> expr > expr .)
    SHOMARANDE      reduce using rule 27 (expr -> expr > expr .)
    EQEQ            reduce using rule 27 (expr -> expr > expr .)
    ,               reduce using rule 27 (expr -> expr > expr .)
    ]               reduce using rule 27 (expr -> expr > expr .)
    ELIF            reduce using rule 27 (expr -> expr > expr .)
    ELSE            reduce using rule 27 (expr -> expr > expr .)
    [               reduce using rule 27 (expr -> expr > expr .)
    +               reduce using rule 27 (expr -> expr > expr .)
    TO              reduce using rule 27 (expr -> expr > expr .)
    TYPE            reduce using rule 27 (expr -> expr > expr .)
    DO              reduce using rule 27 (expr -> expr > expr .)
    TIME            reduce using rule 27 (expr -> expr > expr .)
    NAME            reduce using rule 27 (expr -> expr > expr .)
    CLASS           reduce using rule 27 (expr -> expr > expr .)
    FUNCTION        reduce using rule 27 (expr -> expr > expr .)
    IF              reduce using rule 27 (expr -> expr > expr .)
    FOR             reduce using rule 27 (expr -> expr > expr .)
    RETURN          reduce using rule 27 (expr -> expr > expr .)
    RANDOMRANGE     reduce using rule 27 (expr -> expr > expr .)
    PRINT           reduce using rule 27 (expr -> expr > expr .)
    FLOAT           reduce using rule 27 (expr -> expr > expr .)
    STRING          reduce using rule 27 (expr -> expr > expr .)
    NUMBER          reduce using rule 27 (expr -> expr > expr .)
    NUM_INPUT       reduce using rule 27 (expr -> expr > expr .)
    RAW_INPUT       reduce using rule 27 (expr -> expr > expr .)
    NOT             reduce using rule 27 (expr -> expr > expr .)
    THEN            reduce using rule 27 (expr -> expr > expr .)
    >               shift and go to state 37
    <               shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40
    EQ_GREATER      shift and go to state 41
    EQ_LESS         shift and go to state 42
    NOT_EQEQ        shift and go to state 43
    /               shift and go to state 44
    *               shift and go to state 45
    -               shift and go to state 46
    ADD             shift and go to state 47
    .               shift and go to state 48


state 76

    (28) expr -> expr < expr .
    (27) expr -> expr . > expr
    (28) expr -> expr . < expr
    (30) expr -> expr . AND expr
    (31) expr -> expr . OR expr
    (32) expr -> expr . EQ_GREATER expr
    (33) expr -> expr . EQ_LESS expr
    (34) expr -> expr . NOT_EQEQ expr
    (35) expr -> expr . / expr
    (36) expr -> expr . * expr
    (37) expr -> expr . - expr
    (38) expr -> expr . ADD expr
    (39) expr -> expr . . expr
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ_GREATER resolved as shift
  ! shift/reduce conflict for EQ_LESS resolved as shift
  ! shift/reduce conflict for NOT_EQEQ resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for . resolved as shift
    $end            reduce using rule 28 (expr -> expr < expr .)
    WHILE           reduce using rule 28 (expr -> expr < expr .)
    SHOMARANDE      reduce using rule 28 (expr -> expr < expr .)
    EQEQ            reduce using rule 28 (expr -> expr < expr .)
    ,               reduce using rule 28 (expr -> expr < expr .)
    ]               reduce using rule 28 (expr -> expr < expr .)
    ELIF            reduce using rule 28 (expr -> expr < expr .)
    ELSE            reduce using rule 28 (expr -> expr < expr .)
    [               reduce using rule 28 (expr -> expr < expr .)
    +               reduce using rule 28 (expr -> expr < expr .)
    TO              reduce using rule 28 (expr -> expr < expr .)
    TYPE            reduce using rule 28 (expr -> expr < expr .)
    DO              reduce using rule 28 (expr -> expr < expr .)
    TIME            reduce using rule 28 (expr -> expr < expr .)
    NAME            reduce using rule 28 (expr -> expr < expr .)
    CLASS           reduce using rule 28 (expr -> expr < expr .)
    FUNCTION        reduce using rule 28 (expr -> expr < expr .)
    IF              reduce using rule 28 (expr -> expr < expr .)
    FOR             reduce using rule 28 (expr -> expr < expr .)
    RETURN          reduce using rule 28 (expr -> expr < expr .)
    RANDOMRANGE     reduce using rule 28 (expr -> expr < expr .)
    PRINT           reduce using rule 28 (expr -> expr < expr .)
    FLOAT           reduce using rule 28 (expr -> expr < expr .)
    STRING          reduce using rule 28 (expr -> expr < expr .)
    NUMBER          reduce using rule 28 (expr -> expr < expr .)
    NUM_INPUT       reduce using rule 28 (expr -> expr < expr .)
    RAW_INPUT       reduce using rule 28 (expr -> expr < expr .)
    NOT             reduce using rule 28 (expr -> expr < expr .)
    THEN            reduce using rule 28 (expr -> expr < expr .)
    >               shift and go to state 37
    <               shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40
    EQ_GREATER      shift and go to state 41
    EQ_LESS         shift and go to state 42
    NOT_EQEQ        shift and go to state 43
    /               shift and go to state 44
    *               shift and go to state 45
    -               shift and go to state 46
    ADD             shift and go to state 47
    .               shift and go to state 48


state 77

    (30) expr -> expr AND expr .
    (27) expr -> expr . > expr
    (28) expr -> expr . < expr
    (30) expr -> expr . AND expr
    (31) expr -> expr . OR expr
    (32) expr -> expr . EQ_GREATER expr
    (33) expr -> expr . EQ_LESS expr
    (34) expr -> expr . NOT_EQEQ expr
    (35) expr -> expr . / expr
    (36) expr -> expr . * expr
    (37) expr -> expr . - expr
    (38) expr -> expr . ADD expr
    (39) expr -> expr . . expr
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ_GREATER resolved as shift
  ! shift/reduce conflict for EQ_LESS resolved as shift
  ! shift/reduce conflict for NOT_EQEQ resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for . resolved as shift
    $end            reduce using rule 30 (expr -> expr AND expr .)
    WHILE           reduce using rule 30 (expr -> expr AND expr .)
    SHOMARANDE      reduce using rule 30 (expr -> expr AND expr .)
    EQEQ            reduce using rule 30 (expr -> expr AND expr .)
    ,               reduce using rule 30 (expr -> expr AND expr .)
    ]               reduce using rule 30 (expr -> expr AND expr .)
    ELIF            reduce using rule 30 (expr -> expr AND expr .)
    ELSE            reduce using rule 30 (expr -> expr AND expr .)
    [               reduce using rule 30 (expr -> expr AND expr .)
    +               reduce using rule 30 (expr -> expr AND expr .)
    TO              reduce using rule 30 (expr -> expr AND expr .)
    TYPE            reduce using rule 30 (expr -> expr AND expr .)
    DO              reduce using rule 30 (expr -> expr AND expr .)
    TIME            reduce using rule 30 (expr -> expr AND expr .)
    NAME            reduce using rule 30 (expr -> expr AND expr .)
    CLASS           reduce using rule 30 (expr -> expr AND expr .)
    FUNCTION        reduce using rule 30 (expr -> expr AND expr .)
    IF              reduce using rule 30 (expr -> expr AND expr .)
    FOR             reduce using rule 30 (expr -> expr AND expr .)
    RETURN          reduce using rule 30 (expr -> expr AND expr .)
    RANDOMRANGE     reduce using rule 30 (expr -> expr AND expr .)
    PRINT           reduce using rule 30 (expr -> expr AND expr .)
    FLOAT           reduce using rule 30 (expr -> expr AND expr .)
    STRING          reduce using rule 30 (expr -> expr AND expr .)
    NUMBER          reduce using rule 30 (expr -> expr AND expr .)
    NUM_INPUT       reduce using rule 30 (expr -> expr AND expr .)
    RAW_INPUT       reduce using rule 30 (expr -> expr AND expr .)
    NOT             reduce using rule 30 (expr -> expr AND expr .)
    THEN            reduce using rule 30 (expr -> expr AND expr .)
    >               shift and go to state 37
    <               shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40
    EQ_GREATER      shift and go to state 41
    EQ_LESS         shift and go to state 42
    NOT_EQEQ        shift and go to state 43
    /               shift and go to state 44
    *               shift and go to state 45
    -               shift and go to state 46
    ADD             shift and go to state 47
    .               shift and go to state 48


state 78

    (31) expr -> expr OR expr .
    (27) expr -> expr . > expr
    (28) expr -> expr . < expr
    (30) expr -> expr . AND expr
    (31) expr -> expr . OR expr
    (32) expr -> expr . EQ_GREATER expr
    (33) expr -> expr . EQ_LESS expr
    (34) expr -> expr . NOT_EQEQ expr
    (35) expr -> expr . / expr
    (36) expr -> expr . * expr
    (37) expr -> expr . - expr
    (38) expr -> expr . ADD expr
    (39) expr -> expr . . expr
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ_GREATER resolved as shift
  ! shift/reduce conflict for EQ_LESS resolved as shift
  ! shift/reduce conflict for NOT_EQEQ resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for . resolved as shift
    $end            reduce using rule 31 (expr -> expr OR expr .)
    WHILE           reduce using rule 31 (expr -> expr OR expr .)
    SHOMARANDE      reduce using rule 31 (expr -> expr OR expr .)
    EQEQ            reduce using rule 31 (expr -> expr OR expr .)
    ,               reduce using rule 31 (expr -> expr OR expr .)
    ]               reduce using rule 31 (expr -> expr OR expr .)
    ELIF            reduce using rule 31 (expr -> expr OR expr .)
    ELSE            reduce using rule 31 (expr -> expr OR expr .)
    [               reduce using rule 31 (expr -> expr OR expr .)
    +               reduce using rule 31 (expr -> expr OR expr .)
    TO              reduce using rule 31 (expr -> expr OR expr .)
    TYPE            reduce using rule 31 (expr -> expr OR expr .)
    DO              reduce using rule 31 (expr -> expr OR expr .)
    TIME            reduce using rule 31 (expr -> expr OR expr .)
    NAME            reduce using rule 31 (expr -> expr OR expr .)
    CLASS           reduce using rule 31 (expr -> expr OR expr .)
    FUNCTION        reduce using rule 31 (expr -> expr OR expr .)
    IF              reduce using rule 31 (expr -> expr OR expr .)
    FOR             reduce using rule 31 (expr -> expr OR expr .)
    RETURN          reduce using rule 31 (expr -> expr OR expr .)
    RANDOMRANGE     reduce using rule 31 (expr -> expr OR expr .)
    PRINT           reduce using rule 31 (expr -> expr OR expr .)
    FLOAT           reduce using rule 31 (expr -> expr OR expr .)
    STRING          reduce using rule 31 (expr -> expr OR expr .)
    NUMBER          reduce using rule 31 (expr -> expr OR expr .)
    NUM_INPUT       reduce using rule 31 (expr -> expr OR expr .)
    RAW_INPUT       reduce using rule 31 (expr -> expr OR expr .)
    NOT             reduce using rule 31 (expr -> expr OR expr .)
    THEN            reduce using rule 31 (expr -> expr OR expr .)
    >               shift and go to state 37
    <               shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40
    EQ_GREATER      shift and go to state 41
    EQ_LESS         shift and go to state 42
    NOT_EQEQ        shift and go to state 43
    /               shift and go to state 44
    *               shift and go to state 45
    -               shift and go to state 46
    ADD             shift and go to state 47
    .               shift and go to state 48


state 79

    (32) expr -> expr EQ_GREATER expr .
    (27) expr -> expr . > expr
    (28) expr -> expr . < expr
    (30) expr -> expr . AND expr
    (31) expr -> expr . OR expr
    (32) expr -> expr . EQ_GREATER expr
    (33) expr -> expr . EQ_LESS expr
    (34) expr -> expr . NOT_EQEQ expr
    (35) expr -> expr . / expr
    (36) expr -> expr . * expr
    (37) expr -> expr . - expr
    (38) expr -> expr . ADD expr
    (39) expr -> expr . . expr
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ_GREATER resolved as shift
  ! shift/reduce conflict for EQ_LESS resolved as shift
  ! shift/reduce conflict for NOT_EQEQ resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for . resolved as shift
    $end            reduce using rule 32 (expr -> expr EQ_GREATER expr .)
    WHILE           reduce using rule 32 (expr -> expr EQ_GREATER expr .)
    SHOMARANDE      reduce using rule 32 (expr -> expr EQ_GREATER expr .)
    EQEQ            reduce using rule 32 (expr -> expr EQ_GREATER expr .)
    ,               reduce using rule 32 (expr -> expr EQ_GREATER expr .)
    ]               reduce using rule 32 (expr -> expr EQ_GREATER expr .)
    ELIF            reduce using rule 32 (expr -> expr EQ_GREATER expr .)
    ELSE            reduce using rule 32 (expr -> expr EQ_GREATER expr .)
    [               reduce using rule 32 (expr -> expr EQ_GREATER expr .)
    +               reduce using rule 32 (expr -> expr EQ_GREATER expr .)
    TO              reduce using rule 32 (expr -> expr EQ_GREATER expr .)
    TYPE            reduce using rule 32 (expr -> expr EQ_GREATER expr .)
    DO              reduce using rule 32 (expr -> expr EQ_GREATER expr .)
    TIME            reduce using rule 32 (expr -> expr EQ_GREATER expr .)
    NAME            reduce using rule 32 (expr -> expr EQ_GREATER expr .)
    CLASS           reduce using rule 32 (expr -> expr EQ_GREATER expr .)
    FUNCTION        reduce using rule 32 (expr -> expr EQ_GREATER expr .)
    IF              reduce using rule 32 (expr -> expr EQ_GREATER expr .)
    FOR             reduce using rule 32 (expr -> expr EQ_GREATER expr .)
    RETURN          reduce using rule 32 (expr -> expr EQ_GREATER expr .)
    RANDOMRANGE     reduce using rule 32 (expr -> expr EQ_GREATER expr .)
    PRINT           reduce using rule 32 (expr -> expr EQ_GREATER expr .)
    FLOAT           reduce using rule 32 (expr -> expr EQ_GREATER expr .)
    STRING          reduce using rule 32 (expr -> expr EQ_GREATER expr .)
    NUMBER          reduce using rule 32 (expr -> expr EQ_GREATER expr .)
    NUM_INPUT       reduce using rule 32 (expr -> expr EQ_GREATER expr .)
    RAW_INPUT       reduce using rule 32 (expr -> expr EQ_GREATER expr .)
    NOT             reduce using rule 32 (expr -> expr EQ_GREATER expr .)
    THEN            reduce using rule 32 (expr -> expr EQ_GREATER expr .)
    >               shift and go to state 37
    <               shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40
    EQ_GREATER      shift and go to state 41
    EQ_LESS         shift and go to state 42
    NOT_EQEQ        shift and go to state 43
    /               shift and go to state 44
    *               shift and go to state 45
    -               shift and go to state 46
    ADD             shift and go to state 47
    .               shift and go to state 48


state 80

    (33) expr -> expr EQ_LESS expr .
    (27) expr -> expr . > expr
    (28) expr -> expr . < expr
    (30) expr -> expr . AND expr
    (31) expr -> expr . OR expr
    (32) expr -> expr . EQ_GREATER expr
    (33) expr -> expr . EQ_LESS expr
    (34) expr -> expr . NOT_EQEQ expr
    (35) expr -> expr . / expr
    (36) expr -> expr . * expr
    (37) expr -> expr . - expr
    (38) expr -> expr . ADD expr
    (39) expr -> expr . . expr
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ_GREATER resolved as shift
  ! shift/reduce conflict for EQ_LESS resolved as shift
  ! shift/reduce conflict for NOT_EQEQ resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for . resolved as shift
    $end            reduce using rule 33 (expr -> expr EQ_LESS expr .)
    WHILE           reduce using rule 33 (expr -> expr EQ_LESS expr .)
    SHOMARANDE      reduce using rule 33 (expr -> expr EQ_LESS expr .)
    EQEQ            reduce using rule 33 (expr -> expr EQ_LESS expr .)
    ,               reduce using rule 33 (expr -> expr EQ_LESS expr .)
    ]               reduce using rule 33 (expr -> expr EQ_LESS expr .)
    ELIF            reduce using rule 33 (expr -> expr EQ_LESS expr .)
    ELSE            reduce using rule 33 (expr -> expr EQ_LESS expr .)
    [               reduce using rule 33 (expr -> expr EQ_LESS expr .)
    +               reduce using rule 33 (expr -> expr EQ_LESS expr .)
    TO              reduce using rule 33 (expr -> expr EQ_LESS expr .)
    TYPE            reduce using rule 33 (expr -> expr EQ_LESS expr .)
    DO              reduce using rule 33 (expr -> expr EQ_LESS expr .)
    TIME            reduce using rule 33 (expr -> expr EQ_LESS expr .)
    NAME            reduce using rule 33 (expr -> expr EQ_LESS expr .)
    CLASS           reduce using rule 33 (expr -> expr EQ_LESS expr .)
    FUNCTION        reduce using rule 33 (expr -> expr EQ_LESS expr .)
    IF              reduce using rule 33 (expr -> expr EQ_LESS expr .)
    FOR             reduce using rule 33 (expr -> expr EQ_LESS expr .)
    RETURN          reduce using rule 33 (expr -> expr EQ_LESS expr .)
    RANDOMRANGE     reduce using rule 33 (expr -> expr EQ_LESS expr .)
    PRINT           reduce using rule 33 (expr -> expr EQ_LESS expr .)
    FLOAT           reduce using rule 33 (expr -> expr EQ_LESS expr .)
    STRING          reduce using rule 33 (expr -> expr EQ_LESS expr .)
    NUMBER          reduce using rule 33 (expr -> expr EQ_LESS expr .)
    NUM_INPUT       reduce using rule 33 (expr -> expr EQ_LESS expr .)
    RAW_INPUT       reduce using rule 33 (expr -> expr EQ_LESS expr .)
    NOT             reduce using rule 33 (expr -> expr EQ_LESS expr .)
    THEN            reduce using rule 33 (expr -> expr EQ_LESS expr .)
    >               shift and go to state 37
    <               shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40
    EQ_GREATER      shift and go to state 41
    EQ_LESS         shift and go to state 42
    NOT_EQEQ        shift and go to state 43
    /               shift and go to state 44
    *               shift and go to state 45
    -               shift and go to state 46
    ADD             shift and go to state 47
    .               shift and go to state 48


state 81

    (34) expr -> expr NOT_EQEQ expr .
    (27) expr -> expr . > expr
    (28) expr -> expr . < expr
    (30) expr -> expr . AND expr
    (31) expr -> expr . OR expr
    (32) expr -> expr . EQ_GREATER expr
    (33) expr -> expr . EQ_LESS expr
    (34) expr -> expr . NOT_EQEQ expr
    (35) expr -> expr . / expr
    (36) expr -> expr . * expr
    (37) expr -> expr . - expr
    (38) expr -> expr . ADD expr
    (39) expr -> expr . . expr
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ_GREATER resolved as shift
  ! shift/reduce conflict for EQ_LESS resolved as shift
  ! shift/reduce conflict for NOT_EQEQ resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for . resolved as shift
    $end            reduce using rule 34 (expr -> expr NOT_EQEQ expr .)
    WHILE           reduce using rule 34 (expr -> expr NOT_EQEQ expr .)
    SHOMARANDE      reduce using rule 34 (expr -> expr NOT_EQEQ expr .)
    EQEQ            reduce using rule 34 (expr -> expr NOT_EQEQ expr .)
    ,               reduce using rule 34 (expr -> expr NOT_EQEQ expr .)
    ]               reduce using rule 34 (expr -> expr NOT_EQEQ expr .)
    ELIF            reduce using rule 34 (expr -> expr NOT_EQEQ expr .)
    ELSE            reduce using rule 34 (expr -> expr NOT_EQEQ expr .)
    [               reduce using rule 34 (expr -> expr NOT_EQEQ expr .)
    +               reduce using rule 34 (expr -> expr NOT_EQEQ expr .)
    TO              reduce using rule 34 (expr -> expr NOT_EQEQ expr .)
    TYPE            reduce using rule 34 (expr -> expr NOT_EQEQ expr .)
    DO              reduce using rule 34 (expr -> expr NOT_EQEQ expr .)
    TIME            reduce using rule 34 (expr -> expr NOT_EQEQ expr .)
    NAME            reduce using rule 34 (expr -> expr NOT_EQEQ expr .)
    CLASS           reduce using rule 34 (expr -> expr NOT_EQEQ expr .)
    FUNCTION        reduce using rule 34 (expr -> expr NOT_EQEQ expr .)
    IF              reduce using rule 34 (expr -> expr NOT_EQEQ expr .)
    FOR             reduce using rule 34 (expr -> expr NOT_EQEQ expr .)
    RETURN          reduce using rule 34 (expr -> expr NOT_EQEQ expr .)
    RANDOMRANGE     reduce using rule 34 (expr -> expr NOT_EQEQ expr .)
    PRINT           reduce using rule 34 (expr -> expr NOT_EQEQ expr .)
    FLOAT           reduce using rule 34 (expr -> expr NOT_EQEQ expr .)
    STRING          reduce using rule 34 (expr -> expr NOT_EQEQ expr .)
    NUMBER          reduce using rule 34 (expr -> expr NOT_EQEQ expr .)
    NUM_INPUT       reduce using rule 34 (expr -> expr NOT_EQEQ expr .)
    RAW_INPUT       reduce using rule 34 (expr -> expr NOT_EQEQ expr .)
    NOT             reduce using rule 34 (expr -> expr NOT_EQEQ expr .)
    THEN            reduce using rule 34 (expr -> expr NOT_EQEQ expr .)
    >               shift and go to state 37
    <               shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40
    EQ_GREATER      shift and go to state 41
    EQ_LESS         shift and go to state 42
    NOT_EQEQ        shift and go to state 43
    /               shift and go to state 44
    *               shift and go to state 45
    -               shift and go to state 46
    ADD             shift and go to state 47
    .               shift and go to state 48


state 82

    (35) expr -> expr / expr .
    (27) expr -> expr . > expr
    (28) expr -> expr . < expr
    (30) expr -> expr . AND expr
    (31) expr -> expr . OR expr
    (32) expr -> expr . EQ_GREATER expr
    (33) expr -> expr . EQ_LESS expr
    (34) expr -> expr . NOT_EQEQ expr
    (35) expr -> expr . / expr
    (36) expr -> expr . * expr
    (37) expr -> expr . - expr
    (38) expr -> expr . ADD expr
    (39) expr -> expr . . expr
    >               reduce using rule 35 (expr -> expr / expr .)
    <               reduce using rule 35 (expr -> expr / expr .)
    AND             reduce using rule 35 (expr -> expr / expr .)
    OR              reduce using rule 35 (expr -> expr / expr .)
    EQ_GREATER      reduce using rule 35 (expr -> expr / expr .)
    EQ_LESS         reduce using rule 35 (expr -> expr / expr .)
    NOT_EQEQ        reduce using rule 35 (expr -> expr / expr .)
    /               reduce using rule 35 (expr -> expr / expr .)
    *               reduce using rule 35 (expr -> expr / expr .)
    -               reduce using rule 35 (expr -> expr / expr .)
    ADD             reduce using rule 35 (expr -> expr / expr .)
    .               reduce using rule 35 (expr -> expr / expr .)
    $end            reduce using rule 35 (expr -> expr / expr .)
    WHILE           reduce using rule 35 (expr -> expr / expr .)
    SHOMARANDE      reduce using rule 35 (expr -> expr / expr .)
    EQEQ            reduce using rule 35 (expr -> expr / expr .)
    ,               reduce using rule 35 (expr -> expr / expr .)
    ]               reduce using rule 35 (expr -> expr / expr .)
    ELIF            reduce using rule 35 (expr -> expr / expr .)
    ELSE            reduce using rule 35 (expr -> expr / expr .)
    [               reduce using rule 35 (expr -> expr / expr .)
    +               reduce using rule 35 (expr -> expr / expr .)
    TO              reduce using rule 35 (expr -> expr / expr .)
    TYPE            reduce using rule 35 (expr -> expr / expr .)
    DO              reduce using rule 35 (expr -> expr / expr .)
    TIME            reduce using rule 35 (expr -> expr / expr .)
    NAME            reduce using rule 35 (expr -> expr / expr .)
    CLASS           reduce using rule 35 (expr -> expr / expr .)
    FUNCTION        reduce using rule 35 (expr -> expr / expr .)
    IF              reduce using rule 35 (expr -> expr / expr .)
    FOR             reduce using rule 35 (expr -> expr / expr .)
    RETURN          reduce using rule 35 (expr -> expr / expr .)
    RANDOMRANGE     reduce using rule 35 (expr -> expr / expr .)
    PRINT           reduce using rule 35 (expr -> expr / expr .)
    FLOAT           reduce using rule 35 (expr -> expr / expr .)
    STRING          reduce using rule 35 (expr -> expr / expr .)
    NUMBER          reduce using rule 35 (expr -> expr / expr .)
    NUM_INPUT       reduce using rule 35 (expr -> expr / expr .)
    RAW_INPUT       reduce using rule 35 (expr -> expr / expr .)
    NOT             reduce using rule 35 (expr -> expr / expr .)
    THEN            reduce using rule 35 (expr -> expr / expr .)


state 83

    (36) expr -> expr * expr .
    (27) expr -> expr . > expr
    (28) expr -> expr . < expr
    (30) expr -> expr . AND expr
    (31) expr -> expr . OR expr
    (32) expr -> expr . EQ_GREATER expr
    (33) expr -> expr . EQ_LESS expr
    (34) expr -> expr . NOT_EQEQ expr
    (35) expr -> expr . / expr
    (36) expr -> expr . * expr
    (37) expr -> expr . - expr
    (38) expr -> expr . ADD expr
    (39) expr -> expr . . expr
    >               reduce using rule 36 (expr -> expr * expr .)
    <               reduce using rule 36 (expr -> expr * expr .)
    AND             reduce using rule 36 (expr -> expr * expr .)
    OR              reduce using rule 36 (expr -> expr * expr .)
    EQ_GREATER      reduce using rule 36 (expr -> expr * expr .)
    EQ_LESS         reduce using rule 36 (expr -> expr * expr .)
    NOT_EQEQ        reduce using rule 36 (expr -> expr * expr .)
    /               reduce using rule 36 (expr -> expr * expr .)
    *               reduce using rule 36 (expr -> expr * expr .)
    -               reduce using rule 36 (expr -> expr * expr .)
    ADD             reduce using rule 36 (expr -> expr * expr .)
    .               reduce using rule 36 (expr -> expr * expr .)
    $end            reduce using rule 36 (expr -> expr * expr .)
    WHILE           reduce using rule 36 (expr -> expr * expr .)
    SHOMARANDE      reduce using rule 36 (expr -> expr * expr .)
    EQEQ            reduce using rule 36 (expr -> expr * expr .)
    ,               reduce using rule 36 (expr -> expr * expr .)
    ]               reduce using rule 36 (expr -> expr * expr .)
    ELIF            reduce using rule 36 (expr -> expr * expr .)
    ELSE            reduce using rule 36 (expr -> expr * expr .)
    [               reduce using rule 36 (expr -> expr * expr .)
    +               reduce using rule 36 (expr -> expr * expr .)
    TO              reduce using rule 36 (expr -> expr * expr .)
    TYPE            reduce using rule 36 (expr -> expr * expr .)
    DO              reduce using rule 36 (expr -> expr * expr .)
    TIME            reduce using rule 36 (expr -> expr * expr .)
    NAME            reduce using rule 36 (expr -> expr * expr .)
    CLASS           reduce using rule 36 (expr -> expr * expr .)
    FUNCTION        reduce using rule 36 (expr -> expr * expr .)
    IF              reduce using rule 36 (expr -> expr * expr .)
    FOR             reduce using rule 36 (expr -> expr * expr .)
    RETURN          reduce using rule 36 (expr -> expr * expr .)
    RANDOMRANGE     reduce using rule 36 (expr -> expr * expr .)
    PRINT           reduce using rule 36 (expr -> expr * expr .)
    FLOAT           reduce using rule 36 (expr -> expr * expr .)
    STRING          reduce using rule 36 (expr -> expr * expr .)
    NUMBER          reduce using rule 36 (expr -> expr * expr .)
    NUM_INPUT       reduce using rule 36 (expr -> expr * expr .)
    RAW_INPUT       reduce using rule 36 (expr -> expr * expr .)
    NOT             reduce using rule 36 (expr -> expr * expr .)
    THEN            reduce using rule 36 (expr -> expr * expr .)


state 84

    (37) expr -> expr - expr .
    (27) expr -> expr . > expr
    (28) expr -> expr . < expr
    (30) expr -> expr . AND expr
    (31) expr -> expr . OR expr
    (32) expr -> expr . EQ_GREATER expr
    (33) expr -> expr . EQ_LESS expr
    (34) expr -> expr . NOT_EQEQ expr
    (35) expr -> expr . / expr
    (36) expr -> expr . * expr
    (37) expr -> expr . - expr
    (38) expr -> expr . ADD expr
    (39) expr -> expr . . expr
    >               reduce using rule 37 (expr -> expr - expr .)
    <               reduce using rule 37 (expr -> expr - expr .)
    AND             reduce using rule 37 (expr -> expr - expr .)
    OR              reduce using rule 37 (expr -> expr - expr .)
    EQ_GREATER      reduce using rule 37 (expr -> expr - expr .)
    EQ_LESS         reduce using rule 37 (expr -> expr - expr .)
    NOT_EQEQ        reduce using rule 37 (expr -> expr - expr .)
    -               reduce using rule 37 (expr -> expr - expr .)
    ADD             reduce using rule 37 (expr -> expr - expr .)
    .               reduce using rule 37 (expr -> expr - expr .)
    $end            reduce using rule 37 (expr -> expr - expr .)
    WHILE           reduce using rule 37 (expr -> expr - expr .)
    SHOMARANDE      reduce using rule 37 (expr -> expr - expr .)
    EQEQ            reduce using rule 37 (expr -> expr - expr .)
    ,               reduce using rule 37 (expr -> expr - expr .)
    ]               reduce using rule 37 (expr -> expr - expr .)
    ELIF            reduce using rule 37 (expr -> expr - expr .)
    ELSE            reduce using rule 37 (expr -> expr - expr .)
    [               reduce using rule 37 (expr -> expr - expr .)
    +               reduce using rule 37 (expr -> expr - expr .)
    TO              reduce using rule 37 (expr -> expr - expr .)
    TYPE            reduce using rule 37 (expr -> expr - expr .)
    DO              reduce using rule 37 (expr -> expr - expr .)
    TIME            reduce using rule 37 (expr -> expr - expr .)
    NAME            reduce using rule 37 (expr -> expr - expr .)
    CLASS           reduce using rule 37 (expr -> expr - expr .)
    FUNCTION        reduce using rule 37 (expr -> expr - expr .)
    IF              reduce using rule 37 (expr -> expr - expr .)
    FOR             reduce using rule 37 (expr -> expr - expr .)
    RETURN          reduce using rule 37 (expr -> expr - expr .)
    RANDOMRANGE     reduce using rule 37 (expr -> expr - expr .)
    PRINT           reduce using rule 37 (expr -> expr - expr .)
    FLOAT           reduce using rule 37 (expr -> expr - expr .)
    STRING          reduce using rule 37 (expr -> expr - expr .)
    NUMBER          reduce using rule 37 (expr -> expr - expr .)
    NUM_INPUT       reduce using rule 37 (expr -> expr - expr .)
    RAW_INPUT       reduce using rule 37 (expr -> expr - expr .)
    NOT             reduce using rule 37 (expr -> expr - expr .)
    THEN            reduce using rule 37 (expr -> expr - expr .)
    /               shift and go to state 44
    *               shift and go to state 45


state 85

    (38) expr -> expr ADD expr .
    (27) expr -> expr . > expr
    (28) expr -> expr . < expr
    (30) expr -> expr . AND expr
    (31) expr -> expr . OR expr
    (32) expr -> expr . EQ_GREATER expr
    (33) expr -> expr . EQ_LESS expr
    (34) expr -> expr . NOT_EQEQ expr
    (35) expr -> expr . / expr
    (36) expr -> expr . * expr
    (37) expr -> expr . - expr
    (38) expr -> expr . ADD expr
    (39) expr -> expr . . expr
    >               reduce using rule 38 (expr -> expr ADD expr .)
    <               reduce using rule 38 (expr -> expr ADD expr .)
    AND             reduce using rule 38 (expr -> expr ADD expr .)
    OR              reduce using rule 38 (expr -> expr ADD expr .)
    EQ_GREATER      reduce using rule 38 (expr -> expr ADD expr .)
    EQ_LESS         reduce using rule 38 (expr -> expr ADD expr .)
    NOT_EQEQ        reduce using rule 38 (expr -> expr ADD expr .)
    -               reduce using rule 38 (expr -> expr ADD expr .)
    ADD             reduce using rule 38 (expr -> expr ADD expr .)
    .               reduce using rule 38 (expr -> expr ADD expr .)
    $end            reduce using rule 38 (expr -> expr ADD expr .)
    WHILE           reduce using rule 38 (expr -> expr ADD expr .)
    SHOMARANDE      reduce using rule 38 (expr -> expr ADD expr .)
    EQEQ            reduce using rule 38 (expr -> expr ADD expr .)
    ,               reduce using rule 38 (expr -> expr ADD expr .)
    ]               reduce using rule 38 (expr -> expr ADD expr .)
    ELIF            reduce using rule 38 (expr -> expr ADD expr .)
    ELSE            reduce using rule 38 (expr -> expr ADD expr .)
    [               reduce using rule 38 (expr -> expr ADD expr .)
    +               reduce using rule 38 (expr -> expr ADD expr .)
    TO              reduce using rule 38 (expr -> expr ADD expr .)
    TYPE            reduce using rule 38 (expr -> expr ADD expr .)
    DO              reduce using rule 38 (expr -> expr ADD expr .)
    TIME            reduce using rule 38 (expr -> expr ADD expr .)
    NAME            reduce using rule 38 (expr -> expr ADD expr .)
    CLASS           reduce using rule 38 (expr -> expr ADD expr .)
    FUNCTION        reduce using rule 38 (expr -> expr ADD expr .)
    IF              reduce using rule 38 (expr -> expr ADD expr .)
    FOR             reduce using rule 38 (expr -> expr ADD expr .)
    RETURN          reduce using rule 38 (expr -> expr ADD expr .)
    RANDOMRANGE     reduce using rule 38 (expr -> expr ADD expr .)
    PRINT           reduce using rule 38 (expr -> expr ADD expr .)
    FLOAT           reduce using rule 38 (expr -> expr ADD expr .)
    STRING          reduce using rule 38 (expr -> expr ADD expr .)
    NUMBER          reduce using rule 38 (expr -> expr ADD expr .)
    NUM_INPUT       reduce using rule 38 (expr -> expr ADD expr .)
    RAW_INPUT       reduce using rule 38 (expr -> expr ADD expr .)
    NOT             reduce using rule 38 (expr -> expr ADD expr .)
    THEN            reduce using rule 38 (expr -> expr ADD expr .)
    /               shift and go to state 44
    *               shift and go to state 45


state 86

    (39) expr -> expr . expr .
    (27) expr -> expr . > expr
    (28) expr -> expr . < expr
    (30) expr -> expr . AND expr
    (31) expr -> expr . OR expr
    (32) expr -> expr . EQ_GREATER expr
    (33) expr -> expr . EQ_LESS expr
    (34) expr -> expr . NOT_EQEQ expr
    (35) expr -> expr . / expr
    (36) expr -> expr . * expr
    (37) expr -> expr . - expr
    (38) expr -> expr . ADD expr
    (39) expr -> expr . . expr
    >               reduce using rule 39 (expr -> expr . expr .)
    <               reduce using rule 39 (expr -> expr . expr .)
    AND             reduce using rule 39 (expr -> expr . expr .)
    OR              reduce using rule 39 (expr -> expr . expr .)
    EQ_GREATER      reduce using rule 39 (expr -> expr . expr .)
    EQ_LESS         reduce using rule 39 (expr -> expr . expr .)
    NOT_EQEQ        reduce using rule 39 (expr -> expr . expr .)
    .               reduce using rule 39 (expr -> expr . expr .)
    $end            reduce using rule 39 (expr -> expr . expr .)
    WHILE           reduce using rule 39 (expr -> expr . expr .)
    SHOMARANDE      reduce using rule 39 (expr -> expr . expr .)
    EQEQ            reduce using rule 39 (expr -> expr . expr .)
    ,               reduce using rule 39 (expr -> expr . expr .)
    ]               reduce using rule 39 (expr -> expr . expr .)
    ELIF            reduce using rule 39 (expr -> expr . expr .)
    ELSE            reduce using rule 39 (expr -> expr . expr .)
    [               reduce using rule 39 (expr -> expr . expr .)
    +               reduce using rule 39 (expr -> expr . expr .)
    TO              reduce using rule 39 (expr -> expr . expr .)
    TYPE            reduce using rule 39 (expr -> expr . expr .)
    DO              reduce using rule 39 (expr -> expr . expr .)
    TIME            reduce using rule 39 (expr -> expr . expr .)
    NAME            reduce using rule 39 (expr -> expr . expr .)
    CLASS           reduce using rule 39 (expr -> expr . expr .)
    FUNCTION        reduce using rule 39 (expr -> expr . expr .)
    IF              reduce using rule 39 (expr -> expr . expr .)
    FOR             reduce using rule 39 (expr -> expr . expr .)
    RETURN          reduce using rule 39 (expr -> expr . expr .)
    RANDOMRANGE     reduce using rule 39 (expr -> expr . expr .)
    PRINT           reduce using rule 39 (expr -> expr . expr .)
    FLOAT           reduce using rule 39 (expr -> expr . expr .)
    STRING          reduce using rule 39 (expr -> expr . expr .)
    NUMBER          reduce using rule 39 (expr -> expr . expr .)
    NUM_INPUT       reduce using rule 39 (expr -> expr . expr .)
    RAW_INPUT       reduce using rule 39 (expr -> expr . expr .)
    NOT             reduce using rule 39 (expr -> expr . expr .)
    THEN            reduce using rule 39 (expr -> expr . expr .)
    /               shift and go to state 44
    *               shift and go to state 45
    -               shift and go to state 46
    ADD             shift and go to state 47


state 87

    (50) array -> array [ expr . ]
    (27) expr -> expr . > expr
    (28) expr -> expr . < expr
    (30) expr -> expr . AND expr
    (31) expr -> expr . OR expr
    (32) expr -> expr . EQ_GREATER expr
    (33) expr -> expr . EQ_LESS expr
    (34) expr -> expr . NOT_EQEQ expr
    (35) expr -> expr . / expr
    (36) expr -> expr . * expr
    (37) expr -> expr . - expr
    (38) expr -> expr . ADD expr
    (39) expr -> expr . . expr
    ]               shift and go to state 103
    >               shift and go to state 37
    <               shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40
    EQ_GREATER      shift and go to state 41
    EQ_LESS         shift and go to state 42
    NOT_EQEQ        shift and go to state 43
    /               shift and go to state 44
    *               shift and go to state 45
    -               shift and go to state 46
    ADD             shift and go to state 47
    .               shift and go to state 48


state 88

    (53) array -> array + array .
    (50) array -> array . [ expr ]
    (51) array -> array . + STRING
    (52) array -> array . + expr
    (53) array -> array . + array
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for + resolved as shift
    $end            reduce using rule 53 (array -> array + array .)
    WHILE           reduce using rule 53 (array -> array + array .)
    ,               reduce using rule 53 (array -> array + array .)
    ]               reduce using rule 53 (array -> array + array .)
    ELIF            reduce using rule 53 (array -> array + array .)
    ELSE            reduce using rule 53 (array -> array + array .)
    [               shift and go to state 49
    +               shift and go to state 50


state 89

    (51) array -> array + STRING .
    (21) expr -> STRING .
  ! reduce/reduce conflict for [ resolved using rule 21 (expr -> STRING .)
  ! reduce/reduce conflict for + resolved using rule 21 (expr -> STRING .)
  ! reduce/reduce conflict for $end resolved using rule 21 (expr -> STRING .)
  ! reduce/reduce conflict for WHILE resolved using rule 21 (expr -> STRING .)
  ! reduce/reduce conflict for , resolved using rule 21 (expr -> STRING .)
  ! reduce/reduce conflict for ] resolved using rule 21 (expr -> STRING .)
  ! reduce/reduce conflict for ELIF resolved using rule 21 (expr -> STRING .)
  ! reduce/reduce conflict for ELSE resolved using rule 21 (expr -> STRING .)
    >               reduce using rule 21 (expr -> STRING .)
    <               reduce using rule 21 (expr -> STRING .)
    AND             reduce using rule 21 (expr -> STRING .)
    OR              reduce using rule 21 (expr -> STRING .)
    EQ_GREATER      reduce using rule 21 (expr -> STRING .)
    EQ_LESS         reduce using rule 21 (expr -> STRING .)
    NOT_EQEQ        reduce using rule 21 (expr -> STRING .)
    /               reduce using rule 21 (expr -> STRING .)
    *               reduce using rule 21 (expr -> STRING .)
    -               reduce using rule 21 (expr -> STRING .)
    ADD             reduce using rule 21 (expr -> STRING .)
    .               reduce using rule 21 (expr -> STRING .)
    [               reduce using rule 21 (expr -> STRING .)
    +               reduce using rule 21 (expr -> STRING .)
    $end            reduce using rule 21 (expr -> STRING .)
    WHILE           reduce using rule 21 (expr -> STRING .)
    ,               reduce using rule 21 (expr -> STRING .)
    ]               reduce using rule 21 (expr -> STRING .)
    ELIF            reduce using rule 21 (expr -> STRING .)
    ELSE            reduce using rule 21 (expr -> STRING .)


state 90

    (52) array -> array + expr .
    (27) expr -> expr . > expr
    (28) expr -> expr . < expr
    (30) expr -> expr . AND expr
    (31) expr -> expr . OR expr
    (32) expr -> expr . EQ_GREATER expr
    (33) expr -> expr . EQ_LESS expr
    (34) expr -> expr . NOT_EQEQ expr
    (35) expr -> expr . / expr
    (36) expr -> expr . * expr
    (37) expr -> expr . - expr
    (38) expr -> expr . ADD expr
    (39) expr -> expr . . expr
    [               reduce using rule 52 (array -> array + expr .)
    +               reduce using rule 52 (array -> array + expr .)
    $end            reduce using rule 52 (array -> array + expr .)
    WHILE           reduce using rule 52 (array -> array + expr .)
    ,               reduce using rule 52 (array -> array + expr .)
    ]               reduce using rule 52 (array -> array + expr .)
    ELIF            reduce using rule 52 (array -> array + expr .)
    ELSE            reduce using rule 52 (array -> array + expr .)
    >               shift and go to state 37
    <               shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40
    EQ_GREATER      shift and go to state 41
    EQ_LESS         shift and go to state 42
    NOT_EQEQ        shift and go to state 43
    /               shift and go to state 44
    *               shift and go to state 45
    -               shift and go to state 46
    ADD             shift and go to state 47
    .               shift and go to state 48


state 91

    (23) expr -> NAME .
    (54) array -> NAME .
  ! reduce/reduce conflict for [ resolved using rule 23 (expr -> NAME .)
  ! reduce/reduce conflict for + resolved using rule 23 (expr -> NAME .)
  ! reduce/reduce conflict for $end resolved using rule 23 (expr -> NAME .)
  ! reduce/reduce conflict for WHILE resolved using rule 23 (expr -> NAME .)
  ! reduce/reduce conflict for , resolved using rule 23 (expr -> NAME .)
  ! reduce/reduce conflict for ] resolved using rule 23 (expr -> NAME .)
  ! reduce/reduce conflict for ELIF resolved using rule 23 (expr -> NAME .)
  ! reduce/reduce conflict for ELSE resolved using rule 23 (expr -> NAME .)
    >               reduce using rule 23 (expr -> NAME .)
    <               reduce using rule 23 (expr -> NAME .)
    AND             reduce using rule 23 (expr -> NAME .)
    OR              reduce using rule 23 (expr -> NAME .)
    EQ_GREATER      reduce using rule 23 (expr -> NAME .)
    EQ_LESS         reduce using rule 23 (expr -> NAME .)
    NOT_EQEQ        reduce using rule 23 (expr -> NAME .)
    /               reduce using rule 23 (expr -> NAME .)
    *               reduce using rule 23 (expr -> NAME .)
    -               reduce using rule 23 (expr -> NAME .)
    ADD             reduce using rule 23 (expr -> NAME .)
    .               reduce using rule 23 (expr -> NAME .)
    [               reduce using rule 23 (expr -> NAME .)
    +               reduce using rule 23 (expr -> NAME .)
    $end            reduce using rule 23 (expr -> NAME .)
    WHILE           reduce using rule 23 (expr -> NAME .)
    ,               reduce using rule 23 (expr -> NAME .)
    ]               reduce using rule 23 (expr -> NAME .)
    ELIF            reduce using rule 23 (expr -> NAME .)
    ELSE            reduce using rule 23 (expr -> NAME .)


state 92

    (55) array -> [ elements ] .
    [               reduce using rule 55 (array -> [ elements ] .)
    +               reduce using rule 55 (array -> [ elements ] .)
    $end            reduce using rule 55 (array -> [ elements ] .)
    WHILE           reduce using rule 55 (array -> [ elements ] .)
    ,               reduce using rule 55 (array -> [ elements ] .)
    ]               reduce using rule 55 (array -> [ elements ] .)
    ELIF            reduce using rule 55 (array -> [ elements ] .)
    ELSE            reduce using rule 55 (array -> [ elements ] .)


state 93

    (56) elements -> statement , . elements
    (56) elements -> . statement , elements
    (57) elements -> . statement
    (1) statement -> . TYPE NAME
    (2) statement -> . DO statement WHILE condition
    (3) statement -> . TIME
    (4) statement -> . NAME ( )
    (5) statement -> . CLASS NAME : statement
    (6) statement -> . FUNCTION NAME statement
    (7) statement -> . IF condition THEN statement ELIF condition THEN statement ELSE statement
    (8) statement -> . IF condition THEN statement
    (9) statement -> . IF condition THEN statement ELSE statement
    (10) statement -> . FOR NAME FROM expr TO expr DO statement
    (11) statement -> . WHILE condition statement
    (12) statement -> . var_assign
    (13) statement -> . NAME RUN
    (14) statement -> . array
    (15) statement -> . expr
    (16) statement -> .
    (42) var_assign -> . NAME = bool
    (43) var_assign -> . RETURN NAME
    (44) var_assign -> . NAME = statement
    (45) var_assign -> . NAME = array
    (46) var_assign -> . NAME = expr
    (50) array -> . array [ expr ]
    (51) array -> . array + STRING
    (52) array -> . array + expr
    (53) array -> . array + array
    (54) array -> . NAME
    (55) array -> . [ elements ]
    (17) expr -> . RANDOMRANGE FROM expr TO expr
    (18) expr -> . PRINT TIME
    (19) expr -> . PRINT expr
    (20) expr -> . FLOAT
    (21) expr -> . STRING
    (22) expr -> . NUMBER
    (23) expr -> . NAME
    (24) expr -> . - expr
    (25) expr -> . NUM_INPUT
    (26) expr -> . RAW_INPUT
    (27) expr -> . expr > expr
    (28) expr -> . expr < expr
    (29) expr -> . NOT expr
    (30) expr -> . expr AND expr
    (31) expr -> . expr OR expr
    (32) expr -> . expr EQ_GREATER expr
    (33) expr -> . expr EQ_LESS expr
    (34) expr -> . expr NOT_EQEQ expr
    (35) expr -> . expr / expr
    (36) expr -> . expr * expr
    (37) expr -> . expr - expr
    (38) expr -> . expr ADD expr
    (39) expr -> . expr . expr
    TYPE            shift and go to state 2
    DO              shift and go to state 4
    TIME            shift and go to state 6
    NAME            shift and go to state 3
    CLASS           shift and go to state 7
    FUNCTION        shift and go to state 8
    IF              shift and go to state 9
    FOR             shift and go to state 10
    WHILE           shift and go to state 5
    ,               reduce using rule 16 (statement -> .)
    ]               reduce using rule 16 (statement -> .)
    RETURN          shift and go to state 14
    [               shift and go to state 15
    RANDOMRANGE     shift and go to state 17
    PRINT           shift and go to state 18
    FLOAT           shift and go to state 19
    STRING          shift and go to state 16
    NUMBER          shift and go to state 20
    -               shift and go to state 21
    NUM_INPUT       shift and go to state 22
    RAW_INPUT       shift and go to state 23
    NOT             shift and go to state 24

    statement                      shift and go to state 53
    elements                       shift and go to state 104
    expr                           shift and go to state 11
    var_assign                     shift and go to state 12
    array                          shift and go to state 13

state 94

    (17) expr -> RANDOMRANGE FROM expr . TO expr
    (27) expr -> expr . > expr
    (28) expr -> expr . < expr
    (30) expr -> expr . AND expr
    (31) expr -> expr . OR expr
    (32) expr -> expr . EQ_GREATER expr
    (33) expr -> expr . EQ_LESS expr
    (34) expr -> expr . NOT_EQEQ expr
    (35) expr -> expr . / expr
    (36) expr -> expr . * expr
    (37) expr -> expr . - expr
    (38) expr -> expr . ADD expr
    (39) expr -> expr . . expr
    TO              shift and go to state 105
    >               shift and go to state 37
    <               shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40
    EQ_GREATER      shift and go to state 41
    EQ_LESS         shift and go to state 42
    NOT_EQEQ        shift and go to state 43
    /               shift and go to state 44
    *               shift and go to state 45
    -               shift and go to state 46
    ADD             shift and go to state 47
    .               shift and go to state 48


state 95

    (48) bool -> bool ANDALSO . bool
    (47) bool -> . NOT bool
    (48) bool -> . bool ANDALSO bool
    (49) bool -> . BOOLEAN
    NOT             shift and go to state 107
    BOOLEAN         shift and go to state 66

    bool                           shift and go to state 106

state 96

    (47) bool -> NOT bool .
    (48) bool -> bool . ANDALSO bool
  ! shift/reduce conflict for ANDALSO resolved as shift
    $end            reduce using rule 47 (bool -> NOT bool .)
    WHILE           reduce using rule 47 (bool -> NOT bool .)
    ,               reduce using rule 47 (bool -> NOT bool .)
    ]               reduce using rule 47 (bool -> NOT bool .)
    ELIF            reduce using rule 47 (bool -> NOT bool .)
    ELSE            reduce using rule 47 (bool -> NOT bool .)
    ANDALSO         shift and go to state 95


state 97

    (2) statement -> DO statement WHILE condition .
    $end            reduce using rule 2 (statement -> DO statement WHILE condition .)
    WHILE           reduce using rule 2 (statement -> DO statement WHILE condition .)
    ,               reduce using rule 2 (statement -> DO statement WHILE condition .)
    ]               reduce using rule 2 (statement -> DO statement WHILE condition .)
    ELIF            reduce using rule 2 (statement -> DO statement WHILE condition .)
    ELSE            reduce using rule 2 (statement -> DO statement WHILE condition .)


state 98

    (40) condition -> expr SHOMARANDE expr .
    (27) expr -> expr . > expr
    (28) expr -> expr . < expr
    (30) expr -> expr . AND expr
    (31) expr -> expr . OR expr
    (32) expr -> expr . EQ_GREATER expr
    (33) expr -> expr . EQ_LESS expr
    (34) expr -> expr . NOT_EQEQ expr
    (35) expr -> expr . / expr
    (36) expr -> expr . * expr
    (37) expr -> expr . - expr
    (38) expr -> expr . ADD expr
    (39) expr -> expr . . expr
  ! shift/reduce conflict for - resolved as shift
    TYPE            reduce using rule 40 (condition -> expr SHOMARANDE expr .)
    DO              reduce using rule 40 (condition -> expr SHOMARANDE expr .)
    TIME            reduce using rule 40 (condition -> expr SHOMARANDE expr .)
    NAME            reduce using rule 40 (condition -> expr SHOMARANDE expr .)
    CLASS           reduce using rule 40 (condition -> expr SHOMARANDE expr .)
    FUNCTION        reduce using rule 40 (condition -> expr SHOMARANDE expr .)
    IF              reduce using rule 40 (condition -> expr SHOMARANDE expr .)
    FOR             reduce using rule 40 (condition -> expr SHOMARANDE expr .)
    WHILE           reduce using rule 40 (condition -> expr SHOMARANDE expr .)
    RETURN          reduce using rule 40 (condition -> expr SHOMARANDE expr .)
    [               reduce using rule 40 (condition -> expr SHOMARANDE expr .)
    RANDOMRANGE     reduce using rule 40 (condition -> expr SHOMARANDE expr .)
    PRINT           reduce using rule 40 (condition -> expr SHOMARANDE expr .)
    FLOAT           reduce using rule 40 (condition -> expr SHOMARANDE expr .)
    STRING          reduce using rule 40 (condition -> expr SHOMARANDE expr .)
    NUMBER          reduce using rule 40 (condition -> expr SHOMARANDE expr .)
    NUM_INPUT       reduce using rule 40 (condition -> expr SHOMARANDE expr .)
    RAW_INPUT       reduce using rule 40 (condition -> expr SHOMARANDE expr .)
    NOT             reduce using rule 40 (condition -> expr SHOMARANDE expr .)
    $end            reduce using rule 40 (condition -> expr SHOMARANDE expr .)
    ,               reduce using rule 40 (condition -> expr SHOMARANDE expr .)
    ]               reduce using rule 40 (condition -> expr SHOMARANDE expr .)
    ELIF            reduce using rule 40 (condition -> expr SHOMARANDE expr .)
    ELSE            reduce using rule 40 (condition -> expr SHOMARANDE expr .)
    THEN            reduce using rule 40 (condition -> expr SHOMARANDE expr .)
    >               shift and go to state 37
    <               shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40
    EQ_GREATER      shift and go to state 41
    EQ_LESS         shift and go to state 42
    NOT_EQEQ        shift and go to state 43
    /               shift and go to state 44
    *               shift and go to state 45
    -               shift and go to state 46
    ADD             shift and go to state 47
    .               shift and go to state 48


state 99

    (41) condition -> expr EQEQ expr .
    (27) expr -> expr . > expr
    (28) expr -> expr . < expr
    (30) expr -> expr . AND expr
    (31) expr -> expr . OR expr
    (32) expr -> expr . EQ_GREATER expr
    (33) expr -> expr . EQ_LESS expr
    (34) expr -> expr . NOT_EQEQ expr
    (35) expr -> expr . / expr
    (36) expr -> expr . * expr
    (37) expr -> expr . - expr
    (38) expr -> expr . ADD expr
    (39) expr -> expr . . expr
  ! shift/reduce conflict for - resolved as shift
    TYPE            reduce using rule 41 (condition -> expr EQEQ expr .)
    DO              reduce using rule 41 (condition -> expr EQEQ expr .)
    TIME            reduce using rule 41 (condition -> expr EQEQ expr .)
    NAME            reduce using rule 41 (condition -> expr EQEQ expr .)
    CLASS           reduce using rule 41 (condition -> expr EQEQ expr .)
    FUNCTION        reduce using rule 41 (condition -> expr EQEQ expr .)
    IF              reduce using rule 41 (condition -> expr EQEQ expr .)
    FOR             reduce using rule 41 (condition -> expr EQEQ expr .)
    WHILE           reduce using rule 41 (condition -> expr EQEQ expr .)
    RETURN          reduce using rule 41 (condition -> expr EQEQ expr .)
    [               reduce using rule 41 (condition -> expr EQEQ expr .)
    RANDOMRANGE     reduce using rule 41 (condition -> expr EQEQ expr .)
    PRINT           reduce using rule 41 (condition -> expr EQEQ expr .)
    FLOAT           reduce using rule 41 (condition -> expr EQEQ expr .)
    STRING          reduce using rule 41 (condition -> expr EQEQ expr .)
    NUMBER          reduce using rule 41 (condition -> expr EQEQ expr .)
    NUM_INPUT       reduce using rule 41 (condition -> expr EQEQ expr .)
    RAW_INPUT       reduce using rule 41 (condition -> expr EQEQ expr .)
    NOT             reduce using rule 41 (condition -> expr EQEQ expr .)
    $end            reduce using rule 41 (condition -> expr EQEQ expr .)
    ,               reduce using rule 41 (condition -> expr EQEQ expr .)
    ]               reduce using rule 41 (condition -> expr EQEQ expr .)
    ELIF            reduce using rule 41 (condition -> expr EQEQ expr .)
    ELSE            reduce using rule 41 (condition -> expr EQEQ expr .)
    THEN            reduce using rule 41 (condition -> expr EQEQ expr .)
    >               shift and go to state 37
    <               shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40
    EQ_GREATER      shift and go to state 41
    EQ_LESS         shift and go to state 42
    NOT_EQEQ        shift and go to state 43
    /               shift and go to state 44
    *               shift and go to state 45
    -               shift and go to state 46
    ADD             shift and go to state 47
    .               shift and go to state 48


state 100

    (5) statement -> CLASS NAME : statement .
    $end            reduce using rule 5 (statement -> CLASS NAME : statement .)
    WHILE           reduce using rule 5 (statement -> CLASS NAME : statement .)
    ,               reduce using rule 5 (statement -> CLASS NAME : statement .)
    ]               reduce using rule 5 (statement -> CLASS NAME : statement .)
    ELIF            reduce using rule 5 (statement -> CLASS NAME : statement .)
    ELSE            reduce using rule 5 (statement -> CLASS NAME : statement .)


state 101

    (7) statement -> IF condition THEN statement . ELIF condition THEN statement ELSE statement
    (8) statement -> IF condition THEN statement .
    (9) statement -> IF condition THEN statement . ELSE statement
  ! shift/reduce conflict for ELIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
    ELIF            shift and go to state 108
    $end            reduce using rule 8 (statement -> IF condition THEN statement .)
    WHILE           reduce using rule 8 (statement -> IF condition THEN statement .)
    ,               reduce using rule 8 (statement -> IF condition THEN statement .)
    ]               reduce using rule 8 (statement -> IF condition THEN statement .)
    ELSE            shift and go to state 109


state 102

    (10) statement -> FOR NAME FROM expr . TO expr DO statement
    (27) expr -> expr . > expr
    (28) expr -> expr . < expr
    (30) expr -> expr . AND expr
    (31) expr -> expr . OR expr
    (32) expr -> expr . EQ_GREATER expr
    (33) expr -> expr . EQ_LESS expr
    (34) expr -> expr . NOT_EQEQ expr
    (35) expr -> expr . / expr
    (36) expr -> expr . * expr
    (37) expr -> expr . - expr
    (38) expr -> expr . ADD expr
    (39) expr -> expr . . expr
    TO              shift and go to state 110
    >               shift and go to state 37
    <               shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40
    EQ_GREATER      shift and go to state 41
    EQ_LESS         shift and go to state 42
    NOT_EQEQ        shift and go to state 43
    /               shift and go to state 44
    *               shift and go to state 45
    -               shift and go to state 46
    ADD             shift and go to state 47
    .               shift and go to state 48


state 103

    (50) array -> array [ expr ] .
    [               reduce using rule 50 (array -> array [ expr ] .)
    +               reduce using rule 50 (array -> array [ expr ] .)
    $end            reduce using rule 50 (array -> array [ expr ] .)
    WHILE           reduce using rule 50 (array -> array [ expr ] .)
    ,               reduce using rule 50 (array -> array [ expr ] .)
    ]               reduce using rule 50 (array -> array [ expr ] .)
    ELIF            reduce using rule 50 (array -> array [ expr ] .)
    ELSE            reduce using rule 50 (array -> array [ expr ] .)


state 104

    (56) elements -> statement , elements .
    ]               reduce using rule 56 (elements -> statement , elements .)


state 105

    (17) expr -> RANDOMRANGE FROM expr TO . expr
    (17) expr -> . RANDOMRANGE FROM expr TO expr
    (18) expr -> . PRINT TIME
    (19) expr -> . PRINT expr
    (20) expr -> . FLOAT
    (21) expr -> . STRING
    (22) expr -> . NUMBER
    (23) expr -> . NAME
    (24) expr -> . - expr
    (25) expr -> . NUM_INPUT
    (26) expr -> . RAW_INPUT
    (27) expr -> . expr > expr
    (28) expr -> . expr < expr
    (29) expr -> . NOT expr
    (30) expr -> . expr AND expr
    (31) expr -> . expr OR expr
    (32) expr -> . expr EQ_GREATER expr
    (33) expr -> . expr EQ_LESS expr
    (34) expr -> . expr NOT_EQEQ expr
    (35) expr -> . expr / expr
    (36) expr -> . expr * expr
    (37) expr -> . expr - expr
    (38) expr -> . expr ADD expr
    (39) expr -> . expr . expr
    RANDOMRANGE     shift and go to state 17
    PRINT           shift and go to state 18
    FLOAT           shift and go to state 19
    STRING          shift and go to state 16
    NUMBER          shift and go to state 20
    NAME            shift and go to state 32
    -               shift and go to state 21
    NUM_INPUT       shift and go to state 22
    RAW_INPUT       shift and go to state 23
    NOT             shift and go to state 24

    expr                           shift and go to state 111

state 106

    (48) bool -> bool ANDALSO bool .
    (48) bool -> bool . ANDALSO bool
  ! shift/reduce conflict for ANDALSO resolved as shift
    $end            reduce using rule 48 (bool -> bool ANDALSO bool .)
    WHILE           reduce using rule 48 (bool -> bool ANDALSO bool .)
    ,               reduce using rule 48 (bool -> bool ANDALSO bool .)
    ]               reduce using rule 48 (bool -> bool ANDALSO bool .)
    ELIF            reduce using rule 48 (bool -> bool ANDALSO bool .)
    ELSE            reduce using rule 48 (bool -> bool ANDALSO bool .)
    ANDALSO         shift and go to state 95


state 107

    (47) bool -> NOT . bool
    (47) bool -> . NOT bool
    (48) bool -> . bool ANDALSO bool
    (49) bool -> . BOOLEAN
    NOT             shift and go to state 107
    BOOLEAN         shift and go to state 66

    bool                           shift and go to state 96

state 108

    (7) statement -> IF condition THEN statement ELIF . condition THEN statement ELSE statement
    (40) condition -> . expr SHOMARANDE expr
    (41) condition -> . expr EQEQ expr
    (17) expr -> . RANDOMRANGE FROM expr TO expr
    (18) expr -> . PRINT TIME
    (19) expr -> . PRINT expr
    (20) expr -> . FLOAT
    (21) expr -> . STRING
    (22) expr -> . NUMBER
    (23) expr -> . NAME
    (24) expr -> . - expr
    (25) expr -> . NUM_INPUT
    (26) expr -> . RAW_INPUT
    (27) expr -> . expr > expr
    (28) expr -> . expr < expr
    (29) expr -> . NOT expr
    (30) expr -> . expr AND expr
    (31) expr -> . expr OR expr
    (32) expr -> . expr EQ_GREATER expr
    (33) expr -> . expr EQ_LESS expr
    (34) expr -> . expr NOT_EQEQ expr
    (35) expr -> . expr / expr
    (36) expr -> . expr * expr
    (37) expr -> . expr - expr
    (38) expr -> . expr ADD expr
    (39) expr -> . expr . expr
    RANDOMRANGE     shift and go to state 17
    PRINT           shift and go to state 18
    FLOAT           shift and go to state 19
    STRING          shift and go to state 16
    NUMBER          shift and go to state 20
    NAME            shift and go to state 32
    -               shift and go to state 21
    NUM_INPUT       shift and go to state 22
    RAW_INPUT       shift and go to state 23
    NOT             shift and go to state 24

    condition                      shift and go to state 112
    expr                           shift and go to state 31

state 109

    (9) statement -> IF condition THEN statement ELSE . statement
    (1) statement -> . TYPE NAME
    (2) statement -> . DO statement WHILE condition
    (3) statement -> . TIME
    (4) statement -> . NAME ( )
    (5) statement -> . CLASS NAME : statement
    (6) statement -> . FUNCTION NAME statement
    (7) statement -> . IF condition THEN statement ELIF condition THEN statement ELSE statement
    (8) statement -> . IF condition THEN statement
    (9) statement -> . IF condition THEN statement ELSE statement
    (10) statement -> . FOR NAME FROM expr TO expr DO statement
    (11) statement -> . WHILE condition statement
    (12) statement -> . var_assign
    (13) statement -> . NAME RUN
    (14) statement -> . array
    (15) statement -> . expr
    (16) statement -> .
    (42) var_assign -> . NAME = bool
    (43) var_assign -> . RETURN NAME
    (44) var_assign -> . NAME = statement
    (45) var_assign -> . NAME = array
    (46) var_assign -> . NAME = expr
    (50) array -> . array [ expr ]
    (51) array -> . array + STRING
    (52) array -> . array + expr
    (53) array -> . array + array
    (54) array -> . NAME
    (55) array -> . [ elements ]
    (17) expr -> . RANDOMRANGE FROM expr TO expr
    (18) expr -> . PRINT TIME
    (19) expr -> . PRINT expr
    (20) expr -> . FLOAT
    (21) expr -> . STRING
    (22) expr -> . NUMBER
    (23) expr -> . NAME
    (24) expr -> . - expr
    (25) expr -> . NUM_INPUT
    (26) expr -> . RAW_INPUT
    (27) expr -> . expr > expr
    (28) expr -> . expr < expr
    (29) expr -> . NOT expr
    (30) expr -> . expr AND expr
    (31) expr -> . expr OR expr
    (32) expr -> . expr EQ_GREATER expr
    (33) expr -> . expr EQ_LESS expr
    (34) expr -> . expr NOT_EQEQ expr
    (35) expr -> . expr / expr
    (36) expr -> . expr * expr
    (37) expr -> . expr - expr
    (38) expr -> . expr ADD expr
    (39) expr -> . expr . expr
  ! shift/reduce conflict for WHILE resolved as shift
    TYPE            shift and go to state 2
    DO              shift and go to state 4
    TIME            shift and go to state 6
    NAME            shift and go to state 3
    CLASS           shift and go to state 7
    FUNCTION        shift and go to state 8
    IF              shift and go to state 9
    FOR             shift and go to state 10
    WHILE           shift and go to state 5
    $end            reduce using rule 16 (statement -> .)
    ,               reduce using rule 16 (statement -> .)
    ]               reduce using rule 16 (statement -> .)
    ELIF            reduce using rule 16 (statement -> .)
    ELSE            reduce using rule 16 (statement -> .)
    RETURN          shift and go to state 14
    [               shift and go to state 15
    RANDOMRANGE     shift and go to state 17
    PRINT           shift and go to state 18
    FLOAT           shift and go to state 19
    STRING          shift and go to state 16
    NUMBER          shift and go to state 20
    -               shift and go to state 21
    NUM_INPUT       shift and go to state 22
    RAW_INPUT       shift and go to state 23
    NOT             shift and go to state 24

    statement                      shift and go to state 113
    expr                           shift and go to state 11
    var_assign                     shift and go to state 12
    array                          shift and go to state 13

state 110

    (10) statement -> FOR NAME FROM expr TO . expr DO statement
    (17) expr -> . RANDOMRANGE FROM expr TO expr
    (18) expr -> . PRINT TIME
    (19) expr -> . PRINT expr
    (20) expr -> . FLOAT
    (21) expr -> . STRING
    (22) expr -> . NUMBER
    (23) expr -> . NAME
    (24) expr -> . - expr
    (25) expr -> . NUM_INPUT
    (26) expr -> . RAW_INPUT
    (27) expr -> . expr > expr
    (28) expr -> . expr < expr
    (29) expr -> . NOT expr
    (30) expr -> . expr AND expr
    (31) expr -> . expr OR expr
    (32) expr -> . expr EQ_GREATER expr
    (33) expr -> . expr EQ_LESS expr
    (34) expr -> . expr NOT_EQEQ expr
    (35) expr -> . expr / expr
    (36) expr -> . expr * expr
    (37) expr -> . expr - expr
    (38) expr -> . expr ADD expr
    (39) expr -> . expr . expr
    RANDOMRANGE     shift and go to state 17
    PRINT           shift and go to state 18
    FLOAT           shift and go to state 19
    STRING          shift and go to state 16
    NUMBER          shift and go to state 20
    NAME            shift and go to state 32
    -               shift and go to state 21
    NUM_INPUT       shift and go to state 22
    RAW_INPUT       shift and go to state 23
    NOT             shift and go to state 24

    expr                           shift and go to state 114

state 111

    (17) expr -> RANDOMRANGE FROM expr TO expr .
    (27) expr -> expr . > expr
    (28) expr -> expr . < expr
    (30) expr -> expr . AND expr
    (31) expr -> expr . OR expr
    (32) expr -> expr . EQ_GREATER expr
    (33) expr -> expr . EQ_LESS expr
    (34) expr -> expr . NOT_EQEQ expr
    (35) expr -> expr . / expr
    (36) expr -> expr . * expr
    (37) expr -> expr . - expr
    (38) expr -> expr . ADD expr
    (39) expr -> expr . . expr
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ_GREATER resolved as shift
  ! shift/reduce conflict for EQ_LESS resolved as shift
  ! shift/reduce conflict for NOT_EQEQ resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for . resolved as shift
    $end            reduce using rule 17 (expr -> RANDOMRANGE FROM expr TO expr .)
    WHILE           reduce using rule 17 (expr -> RANDOMRANGE FROM expr TO expr .)
    SHOMARANDE      reduce using rule 17 (expr -> RANDOMRANGE FROM expr TO expr .)
    EQEQ            reduce using rule 17 (expr -> RANDOMRANGE FROM expr TO expr .)
    ,               reduce using rule 17 (expr -> RANDOMRANGE FROM expr TO expr .)
    ]               reduce using rule 17 (expr -> RANDOMRANGE FROM expr TO expr .)
    ELIF            reduce using rule 17 (expr -> RANDOMRANGE FROM expr TO expr .)
    ELSE            reduce using rule 17 (expr -> RANDOMRANGE FROM expr TO expr .)
    [               reduce using rule 17 (expr -> RANDOMRANGE FROM expr TO expr .)
    +               reduce using rule 17 (expr -> RANDOMRANGE FROM expr TO expr .)
    TO              reduce using rule 17 (expr -> RANDOMRANGE FROM expr TO expr .)
    TYPE            reduce using rule 17 (expr -> RANDOMRANGE FROM expr TO expr .)
    DO              reduce using rule 17 (expr -> RANDOMRANGE FROM expr TO expr .)
    TIME            reduce using rule 17 (expr -> RANDOMRANGE FROM expr TO expr .)
    NAME            reduce using rule 17 (expr -> RANDOMRANGE FROM expr TO expr .)
    CLASS           reduce using rule 17 (expr -> RANDOMRANGE FROM expr TO expr .)
    FUNCTION        reduce using rule 17 (expr -> RANDOMRANGE FROM expr TO expr .)
    IF              reduce using rule 17 (expr -> RANDOMRANGE FROM expr TO expr .)
    FOR             reduce using rule 17 (expr -> RANDOMRANGE FROM expr TO expr .)
    RETURN          reduce using rule 17 (expr -> RANDOMRANGE FROM expr TO expr .)
    RANDOMRANGE     reduce using rule 17 (expr -> RANDOMRANGE FROM expr TO expr .)
    PRINT           reduce using rule 17 (expr -> RANDOMRANGE FROM expr TO expr .)
    FLOAT           reduce using rule 17 (expr -> RANDOMRANGE FROM expr TO expr .)
    STRING          reduce using rule 17 (expr -> RANDOMRANGE FROM expr TO expr .)
    NUMBER          reduce using rule 17 (expr -> RANDOMRANGE FROM expr TO expr .)
    NUM_INPUT       reduce using rule 17 (expr -> RANDOMRANGE FROM expr TO expr .)
    RAW_INPUT       reduce using rule 17 (expr -> RANDOMRANGE FROM expr TO expr .)
    NOT             reduce using rule 17 (expr -> RANDOMRANGE FROM expr TO expr .)
    THEN            reduce using rule 17 (expr -> RANDOMRANGE FROM expr TO expr .)
    >               shift and go to state 37
    <               shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40
    EQ_GREATER      shift and go to state 41
    EQ_LESS         shift and go to state 42
    NOT_EQEQ        shift and go to state 43
    /               shift and go to state 44
    *               shift and go to state 45
    -               shift and go to state 46
    ADD             shift and go to state 47
    .               shift and go to state 48


state 112

    (7) statement -> IF condition THEN statement ELIF condition . THEN statement ELSE statement
    THEN            shift and go to state 115


state 113

    (9) statement -> IF condition THEN statement ELSE statement .
    $end            reduce using rule 9 (statement -> IF condition THEN statement ELSE statement .)
    WHILE           reduce using rule 9 (statement -> IF condition THEN statement ELSE statement .)
    ,               reduce using rule 9 (statement -> IF condition THEN statement ELSE statement .)
    ]               reduce using rule 9 (statement -> IF condition THEN statement ELSE statement .)
    ELIF            reduce using rule 9 (statement -> IF condition THEN statement ELSE statement .)
    ELSE            reduce using rule 9 (statement -> IF condition THEN statement ELSE statement .)


state 114

    (10) statement -> FOR NAME FROM expr TO expr . DO statement
    (27) expr -> expr . > expr
    (28) expr -> expr . < expr
    (30) expr -> expr . AND expr
    (31) expr -> expr . OR expr
    (32) expr -> expr . EQ_GREATER expr
    (33) expr -> expr . EQ_LESS expr
    (34) expr -> expr . NOT_EQEQ expr
    (35) expr -> expr . / expr
    (36) expr -> expr . * expr
    (37) expr -> expr . - expr
    (38) expr -> expr . ADD expr
    (39) expr -> expr . . expr
    DO              shift and go to state 116
    >               shift and go to state 37
    <               shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40
    EQ_GREATER      shift and go to state 41
    EQ_LESS         shift and go to state 42
    NOT_EQEQ        shift and go to state 43
    /               shift and go to state 44
    *               shift and go to state 45
    -               shift and go to state 46
    ADD             shift and go to state 47
    .               shift and go to state 48


state 115

    (7) statement -> IF condition THEN statement ELIF condition THEN . statement ELSE statement
    (1) statement -> . TYPE NAME
    (2) statement -> . DO statement WHILE condition
    (3) statement -> . TIME
    (4) statement -> . NAME ( )
    (5) statement -> . CLASS NAME : statement
    (6) statement -> . FUNCTION NAME statement
    (7) statement -> . IF condition THEN statement ELIF condition THEN statement ELSE statement
    (8) statement -> . IF condition THEN statement
    (9) statement -> . IF condition THEN statement ELSE statement
    (10) statement -> . FOR NAME FROM expr TO expr DO statement
    (11) statement -> . WHILE condition statement
    (12) statement -> . var_assign
    (13) statement -> . NAME RUN
    (14) statement -> . array
    (15) statement -> . expr
    (16) statement -> .
    (42) var_assign -> . NAME = bool
    (43) var_assign -> . RETURN NAME
    (44) var_assign -> . NAME = statement
    (45) var_assign -> . NAME = array
    (46) var_assign -> . NAME = expr
    (50) array -> . array [ expr ]
    (51) array -> . array + STRING
    (52) array -> . array + expr
    (53) array -> . array + array
    (54) array -> . NAME
    (55) array -> . [ elements ]
    (17) expr -> . RANDOMRANGE FROM expr TO expr
    (18) expr -> . PRINT TIME
    (19) expr -> . PRINT expr
    (20) expr -> . FLOAT
    (21) expr -> . STRING
    (22) expr -> . NUMBER
    (23) expr -> . NAME
    (24) expr -> . - expr
    (25) expr -> . NUM_INPUT
    (26) expr -> . RAW_INPUT
    (27) expr -> . expr > expr
    (28) expr -> . expr < expr
    (29) expr -> . NOT expr
    (30) expr -> . expr AND expr
    (31) expr -> . expr OR expr
    (32) expr -> . expr EQ_GREATER expr
    (33) expr -> . expr EQ_LESS expr
    (34) expr -> . expr NOT_EQEQ expr
    (35) expr -> . expr / expr
    (36) expr -> . expr * expr
    (37) expr -> . expr - expr
    (38) expr -> . expr ADD expr
    (39) expr -> . expr . expr
    TYPE            shift and go to state 2
    DO              shift and go to state 4
    TIME            shift and go to state 6
    NAME            shift and go to state 3
    CLASS           shift and go to state 7
    FUNCTION        shift and go to state 8
    IF              shift and go to state 9
    FOR             shift and go to state 10
    WHILE           shift and go to state 5
    ELSE            reduce using rule 16 (statement -> .)
    RETURN          shift and go to state 14
    [               shift and go to state 15
    RANDOMRANGE     shift and go to state 17
    PRINT           shift and go to state 18
    FLOAT           shift and go to state 19
    STRING          shift and go to state 16
    NUMBER          shift and go to state 20
    -               shift and go to state 21
    NUM_INPUT       shift and go to state 22
    RAW_INPUT       shift and go to state 23
    NOT             shift and go to state 24

    statement                      shift and go to state 117
    expr                           shift and go to state 11
    var_assign                     shift and go to state 12
    array                          shift and go to state 13

state 116

    (10) statement -> FOR NAME FROM expr TO expr DO . statement
    (1) statement -> . TYPE NAME
    (2) statement -> . DO statement WHILE condition
    (3) statement -> . TIME
    (4) statement -> . NAME ( )
    (5) statement -> . CLASS NAME : statement
    (6) statement -> . FUNCTION NAME statement
    (7) statement -> . IF condition THEN statement ELIF condition THEN statement ELSE statement
    (8) statement -> . IF condition THEN statement
    (9) statement -> . IF condition THEN statement ELSE statement
    (10) statement -> . FOR NAME FROM expr TO expr DO statement
    (11) statement -> . WHILE condition statement
    (12) statement -> . var_assign
    (13) statement -> . NAME RUN
    (14) statement -> . array
    (15) statement -> . expr
    (16) statement -> .
    (42) var_assign -> . NAME = bool
    (43) var_assign -> . RETURN NAME
    (44) var_assign -> . NAME = statement
    (45) var_assign -> . NAME = array
    (46) var_assign -> . NAME = expr
    (50) array -> . array [ expr ]
    (51) array -> . array + STRING
    (52) array -> . array + expr
    (53) array -> . array + array
    (54) array -> . NAME
    (55) array -> . [ elements ]
    (17) expr -> . RANDOMRANGE FROM expr TO expr
    (18) expr -> . PRINT TIME
    (19) expr -> . PRINT expr
    (20) expr -> . FLOAT
    (21) expr -> . STRING
    (22) expr -> . NUMBER
    (23) expr -> . NAME
    (24) expr -> . - expr
    (25) expr -> . NUM_INPUT
    (26) expr -> . RAW_INPUT
    (27) expr -> . expr > expr
    (28) expr -> . expr < expr
    (29) expr -> . NOT expr
    (30) expr -> . expr AND expr
    (31) expr -> . expr OR expr
    (32) expr -> . expr EQ_GREATER expr
    (33) expr -> . expr EQ_LESS expr
    (34) expr -> . expr NOT_EQEQ expr
    (35) expr -> . expr / expr
    (36) expr -> . expr * expr
    (37) expr -> . expr - expr
    (38) expr -> . expr ADD expr
    (39) expr -> . expr . expr
  ! shift/reduce conflict for WHILE resolved as shift
    TYPE            shift and go to state 2
    DO              shift and go to state 4
    TIME            shift and go to state 6
    NAME            shift and go to state 3
    CLASS           shift and go to state 7
    FUNCTION        shift and go to state 8
    IF              shift and go to state 9
    FOR             shift and go to state 10
    WHILE           shift and go to state 5
    $end            reduce using rule 16 (statement -> .)
    ,               reduce using rule 16 (statement -> .)
    ]               reduce using rule 16 (statement -> .)
    ELIF            reduce using rule 16 (statement -> .)
    ELSE            reduce using rule 16 (statement -> .)
    RETURN          shift and go to state 14
    [               shift and go to state 15
    RANDOMRANGE     shift and go to state 17
    PRINT           shift and go to state 18
    FLOAT           shift and go to state 19
    STRING          shift and go to state 16
    NUMBER          shift and go to state 20
    -               shift and go to state 21
    NUM_INPUT       shift and go to state 22
    RAW_INPUT       shift and go to state 23
    NOT             shift and go to state 24

    expr                           shift and go to state 11
    statement                      shift and go to state 118
    var_assign                     shift and go to state 12
    array                          shift and go to state 13

state 117

    (7) statement -> IF condition THEN statement ELIF condition THEN statement . ELSE statement
    ELSE            shift and go to state 119


state 118

    (10) statement -> FOR NAME FROM expr TO expr DO statement .
    $end            reduce using rule 10 (statement -> FOR NAME FROM expr TO expr DO statement .)
    WHILE           reduce using rule 10 (statement -> FOR NAME FROM expr TO expr DO statement .)
    ,               reduce using rule 10 (statement -> FOR NAME FROM expr TO expr DO statement .)
    ]               reduce using rule 10 (statement -> FOR NAME FROM expr TO expr DO statement .)
    ELIF            reduce using rule 10 (statement -> FOR NAME FROM expr TO expr DO statement .)
    ELSE            reduce using rule 10 (statement -> FOR NAME FROM expr TO expr DO statement .)


state 119

    (7) statement -> IF condition THEN statement ELIF condition THEN statement ELSE . statement
    (1) statement -> . TYPE NAME
    (2) statement -> . DO statement WHILE condition
    (3) statement -> . TIME
    (4) statement -> . NAME ( )
    (5) statement -> . CLASS NAME : statement
    (6) statement -> . FUNCTION NAME statement
    (7) statement -> . IF condition THEN statement ELIF condition THEN statement ELSE statement
    (8) statement -> . IF condition THEN statement
    (9) statement -> . IF condition THEN statement ELSE statement
    (10) statement -> . FOR NAME FROM expr TO expr DO statement
    (11) statement -> . WHILE condition statement
    (12) statement -> . var_assign
    (13) statement -> . NAME RUN
    (14) statement -> . array
    (15) statement -> . expr
    (16) statement -> .
    (42) var_assign -> . NAME = bool
    (43) var_assign -> . RETURN NAME
    (44) var_assign -> . NAME = statement
    (45) var_assign -> . NAME = array
    (46) var_assign -> . NAME = expr
    (50) array -> . array [ expr ]
    (51) array -> . array + STRING
    (52) array -> . array + expr
    (53) array -> . array + array
    (54) array -> . NAME
    (55) array -> . [ elements ]
    (17) expr -> . RANDOMRANGE FROM expr TO expr
    (18) expr -> . PRINT TIME
    (19) expr -> . PRINT expr
    (20) expr -> . FLOAT
    (21) expr -> . STRING
    (22) expr -> . NUMBER
    (23) expr -> . NAME
    (24) expr -> . - expr
    (25) expr -> . NUM_INPUT
    (26) expr -> . RAW_INPUT
    (27) expr -> . expr > expr
    (28) expr -> . expr < expr
    (29) expr -> . NOT expr
    (30) expr -> . expr AND expr
    (31) expr -> . expr OR expr
    (32) expr -> . expr EQ_GREATER expr
    (33) expr -> . expr EQ_LESS expr
    (34) expr -> . expr NOT_EQEQ expr
    (35) expr -> . expr / expr
    (36) expr -> . expr * expr
    (37) expr -> . expr - expr
    (38) expr -> . expr ADD expr
    (39) expr -> . expr . expr
  ! shift/reduce conflict for WHILE resolved as shift
    TYPE            shift and go to state 2
    DO              shift and go to state 4
    TIME            shift and go to state 6
    NAME            shift and go to state 3
    CLASS           shift and go to state 7
    FUNCTION        shift and go to state 8
    IF              shift and go to state 9
    FOR             shift and go to state 10
    WHILE           shift and go to state 5
    $end            reduce using rule 16 (statement -> .)
    ,               reduce using rule 16 (statement -> .)
    ]               reduce using rule 16 (statement -> .)
    ELIF            reduce using rule 16 (statement -> .)
    ELSE            reduce using rule 16 (statement -> .)
    RETURN          shift and go to state 14
    [               shift and go to state 15
    RANDOMRANGE     shift and go to state 17
    PRINT           shift and go to state 18
    FLOAT           shift and go to state 19
    STRING          shift and go to state 16
    NUMBER          shift and go to state 20
    -               shift and go to state 21
    NUM_INPUT       shift and go to state 22
    RAW_INPUT       shift and go to state 23
    NOT             shift and go to state 24

    statement                      shift and go to state 120
    expr                           shift and go to state 11
    var_assign                     shift and go to state 12
    array                          shift and go to state 13

state 120

    (7) statement -> IF condition THEN statement ELIF condition THEN statement ELSE statement .
    $end            reduce using rule 7 (statement -> IF condition THEN statement ELIF condition THEN statement ELSE statement .)
    WHILE           reduce using rule 7 (statement -> IF condition THEN statement ELIF condition THEN statement ELSE statement .)
    ,               reduce using rule 7 (statement -> IF condition THEN statement ELIF condition THEN statement ELSE statement .)
    ]               reduce using rule 7 (statement -> IF condition THEN statement ELIF condition THEN statement ELSE statement .)
    ELIF            reduce using rule 7 (statement -> IF condition THEN statement ELIF condition THEN statement ELSE statement .)
    ELSE            reduce using rule 7 (statement -> IF condition THEN statement ELIF condition THEN statement ELSE statement .)


Conflicts:

shift/reduce conflict for WHILE in state 4 resolved as shift
shift/reduce conflict for WHILE in state 28 resolved as shift
shift/reduce conflict for WHILE in state 30 resolved as shift
shift/reduce conflict for WHILE in state 34 resolved as shift
shift/reduce conflict for > in state 56 resolved as shift
shift/reduce conflict for < in state 56 resolved as shift
shift/reduce conflict for AND in state 56 resolved as shift
shift/reduce conflict for OR in state 56 resolved as shift
shift/reduce conflict for EQ_GREATER in state 56 resolved as shift
shift/reduce conflict for EQ_LESS in state 56 resolved as shift
shift/reduce conflict for NOT_EQEQ in state 56 resolved as shift
shift/reduce conflict for / in state 56 resolved as shift
shift/reduce conflict for * in state 56 resolved as shift
shift/reduce conflict for - in state 56 resolved as shift
shift/reduce conflict for ADD in state 56 resolved as shift
shift/reduce conflict for . in state 56 resolved as shift
shift/reduce conflict for > in state 58 resolved as shift
shift/reduce conflict for < in state 58 resolved as shift
shift/reduce conflict for AND in state 58 resolved as shift
shift/reduce conflict for OR in state 58 resolved as shift
shift/reduce conflict for EQ_GREATER in state 58 resolved as shift
shift/reduce conflict for EQ_LESS in state 58 resolved as shift
shift/reduce conflict for NOT_EQEQ in state 58 resolved as shift
shift/reduce conflict for / in state 58 resolved as shift
shift/reduce conflict for * in state 58 resolved as shift
shift/reduce conflict for - in state 58 resolved as shift
shift/reduce conflict for ADD in state 58 resolved as shift
shift/reduce conflict for . in state 58 resolved as shift
shift/reduce conflict for WHILE in state 71 resolved as shift
shift/reduce conflict for WHILE in state 73 resolved as shift
shift/reduce conflict for > in state 75 resolved as shift
shift/reduce conflict for < in state 75 resolved as shift
shift/reduce conflict for AND in state 75 resolved as shift
shift/reduce conflict for OR in state 75 resolved as shift
shift/reduce conflict for EQ_GREATER in state 75 resolved as shift
shift/reduce conflict for EQ_LESS in state 75 resolved as shift
shift/reduce conflict for NOT_EQEQ in state 75 resolved as shift
shift/reduce conflict for / in state 75 resolved as shift
shift/reduce conflict for * in state 75 resolved as shift
shift/reduce conflict for - in state 75 resolved as shift
shift/reduce conflict for ADD in state 75 resolved as shift
shift/reduce conflict for . in state 75 resolved as shift
shift/reduce conflict for > in state 76 resolved as shift
shift/reduce conflict for < in state 76 resolved as shift
shift/reduce conflict for AND in state 76 resolved as shift
shift/reduce conflict for OR in state 76 resolved as shift
shift/reduce conflict for EQ_GREATER in state 76 resolved as shift
shift/reduce conflict for EQ_LESS in state 76 resolved as shift
shift/reduce conflict for NOT_EQEQ in state 76 resolved as shift
shift/reduce conflict for / in state 76 resolved as shift
shift/reduce conflict for * in state 76 resolved as shift
shift/reduce conflict for - in state 76 resolved as shift
shift/reduce conflict for ADD in state 76 resolved as shift
shift/reduce conflict for . in state 76 resolved as shift
shift/reduce conflict for > in state 77 resolved as shift
shift/reduce conflict for < in state 77 resolved as shift
shift/reduce conflict for AND in state 77 resolved as shift
shift/reduce conflict for OR in state 77 resolved as shift
shift/reduce conflict for EQ_GREATER in state 77 resolved as shift
shift/reduce conflict for EQ_LESS in state 77 resolved as shift
shift/reduce conflict for NOT_EQEQ in state 77 resolved as shift
shift/reduce conflict for / in state 77 resolved as shift
shift/reduce conflict for * in state 77 resolved as shift
shift/reduce conflict for - in state 77 resolved as shift
shift/reduce conflict for ADD in state 77 resolved as shift
shift/reduce conflict for . in state 77 resolved as shift
shift/reduce conflict for > in state 78 resolved as shift
shift/reduce conflict for < in state 78 resolved as shift
shift/reduce conflict for AND in state 78 resolved as shift
shift/reduce conflict for OR in state 78 resolved as shift
shift/reduce conflict for EQ_GREATER in state 78 resolved as shift
shift/reduce conflict for EQ_LESS in state 78 resolved as shift
shift/reduce conflict for NOT_EQEQ in state 78 resolved as shift
shift/reduce conflict for / in state 78 resolved as shift
shift/reduce conflict for * in state 78 resolved as shift
shift/reduce conflict for - in state 78 resolved as shift
shift/reduce conflict for ADD in state 78 resolved as shift
shift/reduce conflict for . in state 78 resolved as shift
shift/reduce conflict for > in state 79 resolved as shift
shift/reduce conflict for < in state 79 resolved as shift
shift/reduce conflict for AND in state 79 resolved as shift
shift/reduce conflict for OR in state 79 resolved as shift
shift/reduce conflict for EQ_GREATER in state 79 resolved as shift
shift/reduce conflict for EQ_LESS in state 79 resolved as shift
shift/reduce conflict for NOT_EQEQ in state 79 resolved as shift
shift/reduce conflict for / in state 79 resolved as shift
shift/reduce conflict for * in state 79 resolved as shift
shift/reduce conflict for - in state 79 resolved as shift
shift/reduce conflict for ADD in state 79 resolved as shift
shift/reduce conflict for . in state 79 resolved as shift
shift/reduce conflict for > in state 80 resolved as shift
shift/reduce conflict for < in state 80 resolved as shift
shift/reduce conflict for AND in state 80 resolved as shift
shift/reduce conflict for OR in state 80 resolved as shift
shift/reduce conflict for EQ_GREATER in state 80 resolved as shift
shift/reduce conflict for EQ_LESS in state 80 resolved as shift
shift/reduce conflict for NOT_EQEQ in state 80 resolved as shift
shift/reduce conflict for / in state 80 resolved as shift
shift/reduce conflict for * in state 80 resolved as shift
shift/reduce conflict for - in state 80 resolved as shift
shift/reduce conflict for ADD in state 80 resolved as shift
shift/reduce conflict for . in state 80 resolved as shift
shift/reduce conflict for > in state 81 resolved as shift
shift/reduce conflict for < in state 81 resolved as shift
shift/reduce conflict for AND in state 81 resolved as shift
shift/reduce conflict for OR in state 81 resolved as shift
shift/reduce conflict for EQ_GREATER in state 81 resolved as shift
shift/reduce conflict for EQ_LESS in state 81 resolved as shift
shift/reduce conflict for NOT_EQEQ in state 81 resolved as shift
shift/reduce conflict for / in state 81 resolved as shift
shift/reduce conflict for * in state 81 resolved as shift
shift/reduce conflict for - in state 81 resolved as shift
shift/reduce conflict for ADD in state 81 resolved as shift
shift/reduce conflict for . in state 81 resolved as shift
shift/reduce conflict for [ in state 88 resolved as shift
shift/reduce conflict for + in state 88 resolved as shift
shift/reduce conflict for ANDALSO in state 96 resolved as shift
shift/reduce conflict for - in state 98 resolved as shift
shift/reduce conflict for - in state 99 resolved as shift
shift/reduce conflict for ELIF in state 101 resolved as shift
shift/reduce conflict for ELSE in state 101 resolved as shift
shift/reduce conflict for ANDALSO in state 106 resolved as shift
shift/reduce conflict for WHILE in state 109 resolved as shift
shift/reduce conflict for > in state 111 resolved as shift
shift/reduce conflict for < in state 111 resolved as shift
shift/reduce conflict for AND in state 111 resolved as shift
shift/reduce conflict for OR in state 111 resolved as shift
shift/reduce conflict for EQ_GREATER in state 111 resolved as shift
shift/reduce conflict for EQ_LESS in state 111 resolved as shift
shift/reduce conflict for NOT_EQEQ in state 111 resolved as shift
shift/reduce conflict for / in state 111 resolved as shift
shift/reduce conflict for * in state 111 resolved as shift
shift/reduce conflict for - in state 111 resolved as shift
shift/reduce conflict for ADD in state 111 resolved as shift
shift/reduce conflict for . in state 111 resolved as shift
shift/reduce conflict for WHILE in state 116 resolved as shift
shift/reduce conflict for WHILE in state 119 resolved as shift
reduce/reduce conflict in state 3 resolved using rule expr -> NAME
rejected rule (array -> NAME) in state 3
reduce/reduce conflict in state 60 resolved using rule expr -> NAME
rejected rule (array -> NAME) in state 60
reduce/reduce conflict in state 63 resolved using rule statement -> array
rejected rule (var_assign -> NAME = array) in state 63
reduce/reduce conflict in state 64 resolved using rule statement -> expr
rejected rule (var_assign -> NAME = expr) in state 64
reduce/reduce conflict in state 89 resolved using rule expr -> STRING
rejected rule (array -> array + STRING) in state 89
reduce/reduce conflict in state 91 resolved using rule expr -> NAME
rejected rule (array -> NAME) in state 91
Rule (var_assign -> NAME = array) is never reduced
Rule (var_assign -> NAME = expr) is never reduced
Rule (array -> array + STRING) is never reduced